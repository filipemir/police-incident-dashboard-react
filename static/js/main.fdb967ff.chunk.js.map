{"version":3,"sources":["utils/codeGroups.js","constants/codeGroups.js","components/Map/index.jsx","constants/timeframes.js","components/TimeframePicker/index.jsx","state/incidents/actions.js","state/incidents/reducer.js","state/incidents/selectors.js","state/incidents/index.js","components/FilterGroup/index.jsx","components/IncidentGroupFilter/index.jsx","components/DistrictFilter/index.jsx","components/Menu/index.jsx","utils/timeframes.js","mocks/client.js","App.js","serviceWorker.js","index.js","images/arrows.svg","images/controls.svg"],"names":["codeGroupScale","scaleOrdinal","schemeSet3","domain","getIncidentGroupName","incident","code","parseInt","OFFENSE_CODE","group","incidentGroups","console","log","GROUP","TILE_LAYER_URL","TILE_LAYER_ATTRIBUTION","BOS_LAT_LONG","BOS_LIMITS","getIncidentMarker","latLng","cg","properties","leaflet","radius","color","weight","opacity","fillOpacity","bindIncidentPopup","feature","layer","list","Object","keys","filter","p","startsWith","map","replace","bindPopup","IncidentMap","incidents","geojsonData","geojson","parse","Point","className","Map","center","bounds","TileLayer","url","attribution","GeoJSON","key","Math","random","data","pointToLayer","onEachFeature","ONE_DAY","value","unit","TIMEFRAMES","options","t","label","TimeframePicker","timeframe","onTimeframeChange","timeframeIndex","findIndex","isEqual","classNamePrefix","onChange","theme","borderRadius","colors","primary","primary75","primary25","neutral0","spacing","menuGutter","controlHeight","LOAD_INCIDENTS","TOGGLE_INCIDENT_GROUP","TOGGLE_DISTRICT","HIDE_ALL_GROUPS","HIDE_ALL_DISTRICTS","SHOW_ALL_GROUPS","SHOW_ALL_DISTRICTS","INITIAL_STATE","visibleIds","Set","hiddenIds","counts","total","totalVisible","perGroup","perDistrict","filters","visibleGroups","visibleDistricts","reduceNewFilters","state","newFilters","newVisibleIds","newHiddenIds","newVisibleTotal","values","forEach","has","DISTRICT","incidentIsVisible","add","_clientSideId","incidentsReducer","action","type","payload","ids","groupName","district","reduceLoadIncidents","delete","reduceToggleFilter","reduceShowAllIncidentGroups","reduceShowAllDistricts","reduceHideAllIncidentGroups","reduceHideAllDistricts","Error","getVisibleIncidents","result","id","push","useIncidentsReducer","useReducer","FilterGroup","children","onSelectAll","onUnselectAll","onClick","IncidentGroupFilter","incidentsState","dispatchIncidentsAction","groups","sort","a","b","getSortedIncidentGroups","i","count","getIncidentCountInGroup","isVisible","toggleIncidentGroup","style","backgroundColor","hexToRgba","borderColor","DistrictFilter","districts","getSortedDistricts","getIncidentCountInDistrict","toggleDistrict","Menu","dates","isLoadingIncidents","startDate","endDate","visible","getVisibleIncidentCount","hasIncidents","useState","collapsed","setCollapsed","src","controls","format","year","size","loading","arrows","href","target","rel","getTimeframeDates","moment","subtract","counter","END_DATE","Boolean","window","location","hostname","match","ReactDOM","render","setLoading","setTimeframe","setDates","useEffect","refreshIncidents","async","Promise","resolve","setTimeout","mockData","r","getIncidents","then","incidentsByGroup","intervalId","setInterval","clearInterval","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fdb967ff.chunk.js","sourcesContent":["import { scaleOrdinal } from 'd3-scale';\nimport { schemeSet3 } from 'd3-scale-chromatic';\nimport { CODE_GROUPS } from '../constants/codeGroups';\nimport incidentGroups from '../static/incident-groups';\n\n/**\n * Returns a scale to color the offense code groups\n */\nexport const codeGroupScale = scaleOrdinal(schemeSet3).domain(CODE_GROUPS);\n\n/**\n * Gets the incident group name matching the provided incident's offense code\n * @param incident [Incident]\n * @returns {string} - Group name\n */\nexport function getIncidentGroupName(incident) {\n    const code = parseInt(incident.OFFENSE_CODE, 10),\n        group = incidentGroups[code];\n\n    if (!group) {\n        // TODO: Report these somewhere, instead of just logging them\n        console.log(`Incident with unknown group code found: ${group}. Assigning to \"Other\"`);\n        console.log(group);\n    }\n\n    return group ? group.GROUP : 'Other';\n}\n","export const CODE_GROUPS = [\n    'Firearm Violations',\n    'Confidence Games',\n    'Larceny From Motor Vehicle',\n    'Towed',\n    'Property Related Damage',\n    'Missing Person Located',\n    'Auto Theft Recovery',\n    'INVESTIGATE PERSON',\n    'Harbor Related Incidents',\n    'Service',\n    'Harassment',\n    'Landlord / Tenant Disputes',\n    'Property Found',\n    'HUMAN TRAFFICKING',\n    'Vandalism',\n    'License Violation',\n    'Robbery',\n    'License Plate Related Incidents',\n    'Counterfeiting',\n    'Warrant Arrests',\n    'Disorderly Conduct',\n    'Motor Vehicle Accident Response',\n    'Biological Threat',\n    'Embezzlement',\n    'Ballistics',\n    'Prisoner Related Incidents',\n    'Other Burglary',\n    'Verbal Disputes',\n    'Auto Theft',\n    'Medical Assistance',\n    'Restraining Order Violations',\n    'Manslaughter',\n    'Larceny',\n    'Evading Fare',\n    'Aircraft',\n    'Drug Violation',\n    'Bomb Hoax',\n    'Fire Related Reports',\n    'HUMAN TRAFFICKING - INVOLUNTARY SERVITUDE',\n    'Criminal Harassment',\n    'HOME INVASION',\n    'Search Warrants',\n    'Homicide',\n    'Fraud',\n    'Prostitution',\n    'Explosives',\n    'Residential Burglary',\n    'Operating Under the Influence',\n    'Recovered Stolen Property',\n    'Other',\n    'Liquor Violation',\n    'Commercial Burglary',\n    'Gambling',\n    'Investigate Person',\n    'Aggravated Assault',\n    'Simple Assault',\n    'Property Lost',\n    'Phone Call Complaints',\n    'Missing Person Reported',\n    'Burglary - No Property Taken',\n    'Arson',\n    'Firearm Discovery',\n    'Assembly or Gathering Violations',\n    'Police Service Incidents',\n    'Violations',\n    'Offenses Against Child / Family',\n    'Investigate Property'\n];\n","import React from 'react';\nimport geojson from  \"geojson\";\nimport * as leaflet from \"leaflet\";\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\n\nimport './styles.scss';\nimport {codeGroupScale} from \"../../utils/codeGroups\";\n\nconst TILE_LAYER_URL = 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',\n    TILE_LAYER_ATTRIBUTION = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    BOS_LAT_LONG = [42.32390487760298, -71.07416152954103],\n    BOS_LIMITS = [[42.39351800, -71.00516847],  [42.24042076, -71.16843346]];\n\nfunction getIncidentMarker(incident, latLng) {\n    const cg = incident.properties['OFFENSE_CODE_GROUP'];\n    return leaflet.circleMarker(latLng, {\n        radius: 4,\n        color: codeGroupScale(cg),\n        weight: 1,\n        opacity: 0.5,\n        fillOpacity: 0.25\n    });\n}\n\nfunction bindIncidentPopup(feature, layer) {\n    const properties = Object.keys(feature.properties).filter(p => !p.startsWith('_'));\n    const list = properties.map(p => `<tr><th>${p.replace(/_/g,' ')}</th><td>${feature.properties[p]}<td></tr>`)\n    layer.bindPopup(`<table><tbody>${list}</tbody></table>`);\n}\n\n/**\n * @returns React component\n * @constructor\n */\nexport default function IncidentMap({ incidents }) {\n    const geojsonData = geojson.parse(incidents, {Point: ['Lat', 'Long']});\n\n    // Commenting out the incident list for now list for performance reasons:\n    return <div className=\"map-root\">\n        {/*<IncidentList incidents={incidents} />*/}\n        <Map center={BOS_LAT_LONG} bounds={BOS_LIMITS}>\n            <TileLayer url={TILE_LAYER_URL} attribution={TILE_LAYER_ATTRIBUTION} />\n            <GeoJSON key={Math.random()} data={geojsonData} pointToLayer={getIncidentMarker} onEachFeature={bindIncidentPopup}/>\n        </Map>\n    </div>;\n}\n\n","export const ONE_HOUR = { value: 1, unit: 'hour' };\nexport const ONE_DAY = { value: 1, unit: 'day' };\nexport const SEVEN_DAYS = { value: 7, unit: 'days' };\nexport const THIRTY_DAYS = { value: 30, unit: 'days' };\nexport const THREE_MONTHS = { value: 3, unit: 'months' };\nexport const SIX_MONTHS = { value: 6, unit: 'months' };\nexport const ONE_YEAR = { value: 1, unit: 'year' };\n\nexport const TIMEFRAMES = [ONE_HOUR, ONE_DAY, SEVEN_DAYS, THIRTY_DAYS, THREE_MONTHS, SIX_MONTHS, ONE_YEAR];\n","import React from 'react';\nimport Select from 'react-select';\nimport isEqual from 'lodash/isEqual';\n\nimport './styles.scss';\nimport { TIMEFRAMES } from '../../constants/timeframes';\n\nconst options = TIMEFRAMES.map(t => {\n    return { value: t, label: `${t.value} ${t.unit}` };\n});\n\nexport default function TimeframePicker({ timeframe, onTimeframeChange }) {\n    const timeframeIndex = TIMEFRAMES.findIndex(t => isEqual(t, timeframe));\n\n    return (\n        <div className={'timeframe-picker'}>\n            <Select\n                className={'timeframe-picker__selector'}\n                classNamePrefix={'react-select'}\n                value={options[timeframeIndex]}\n                onChange={t => onTimeframeChange(t.value)}\n                options={options}\n                theme={theme => ({\n                    ...theme,\n                    borderRadius: 0,\n                    colors: {\n                        ...theme.colors,\n                        primary: '#fefffe',\n                        primary75: '#1086ff',\n                        primary25: '#1086ff',\n                        neutral0: '#33323c'\n                    },\n                    spacing: {\n                        ...theme.spacing,\n                        menuGutter: 0,\n                        controlHeight: 30\n                    }\n                })}\n            />\n        </div>\n    );\n}\n","/**\n *\n * @type {string}\n */\nexport const LOAD_INCIDENTS = 'load-incidents';\nexport const TOGGLE_INCIDENT_GROUP = 'toggle-group';\nexport const TOGGLE_DISTRICT = 'toggle-district';\nexport const HIDE_ALL_GROUPS = 'hide-all-groups';\nexport const HIDE_ALL_DISTRICTS = 'hide-all-districts';\nexport const SHOW_ALL_GROUPS = 'show-all-groups';\nexport const SHOW_ALL_DISTRICTS = 'show-all-districts';\n\n/**\n * @param {Incident[]} incidents\n * @returns {IncidentsAction<{ incidents: Incident[] }>}\n */\nexport function loadIncidents(incidents) {\n    return { type: LOAD_INCIDENTS, payload: { incidents } };\n}\n\n/**\n * @param {string} group\n * @returns {IncidentsAction<{ group: string }>}\n */\nexport function toggleIncidentGroup(group) {\n    return { type: TOGGLE_INCIDENT_GROUP, payload: { group } };\n}\n\n/**\n * @param {string} district\n * @returns {IncidentsAction<{ district: string }>}\n */\nexport function toggleDistrict(district) {\n    return { type: TOGGLE_DISTRICT, payload: { district } };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function showAllIncidentGroups() {\n    return { type: SHOW_ALL_GROUPS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function showAllDistricts() {\n    return { type: SHOW_ALL_DISTRICTS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function hideAllIncidentGroups() {\n    return { type: HIDE_ALL_GROUPS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function hideAllDistricts() {\n    return { type: HIDE_ALL_DISTRICTS };\n}\n","import { useReducer } from 'react';\nimport {\n    HIDE_ALL_DISTRICTS,\n    HIDE_ALL_GROUPS,\n    LOAD_INCIDENTS,\n    SHOW_ALL_DISTRICTS,\n    SHOW_ALL_GROUPS,\n    TOGGLE_DISTRICT,\n    TOGGLE_INCIDENT_GROUP\n} from './actions';\nimport { getIncidentGroupName } from '../../utils/codeGroups';\n\nconst INITIAL_STATE = {\n    incidents: {\n        map: {},\n        visibleIds: new Set(),\n        hiddenIds: new Set()\n    },\n    counts: {\n        total: 0,\n        totalVisible: 0,\n        perGroup: {},\n        perDistrict: {}\n    },\n    filters: {\n        visibleGroups: new Set(),\n        visibleDistricts: new Set()\n    }\n};\n\n/**\n * Determine whether the incident should be visible according to the provided filters\n *\n * @param incident {Incident}\n * @param filters {IncidentsFilters}\n * @returns {boolean}\n */\nfunction incidentIsVisible({ incident, filters }) {\n    const { visibleGroups, visibleDistricts } = filters;\n    return visibleGroups.has(getIncidentGroupName(incident)) && visibleDistricts.has(incident.DISTRICT);\n}\n\n/**\n * Resets state (including filters and counts) with a new set of incidents\n *\n * @param state {IncidentsState}\n * @param payload {{ incidents: Incident[] }}\n * @returns {IncidentsState}\n */\nfunction reduceLoadIncidents(state, { incidents }) {\n    const visibleGroups = new Set(),\n        visibleDistricts = new Set(),\n        ids = new Set(),\n        map = {},\n        perGroup = {},\n        perDistrict = {};\n    let total = 0;\n\n    incidents.forEach(incident => {\n        map[incident._clientSideId] = incident;\n        ids.add(incident._clientSideId);\n        total += 1;\n\n        const groupName = getIncidentGroupName(incident),\n            district = incident.DISTRICT;\n\n        visibleGroups.add(groupName);\n        !perGroup[groupName] && (perGroup[groupName] = 0);\n        perGroup[groupName] += 1;\n\n        visibleDistricts.add(district);\n        !perDistrict[district] && (perDistrict[district] = 0);\n        perDistrict[district] += 1;\n    });\n\n    return {\n        incidents: { map, hiddenIds: new Set(), visibleIds: ids },\n        counts: { total, totalVisible: total, perGroup, perDistrict },\n        filters: { visibleGroups, visibleDistricts }\n    };\n}\n\n/**\n * Reduces the provided state in accordance with the provided filters\n *\n * @param state {IncidentsState}\n * @param newFilters {IncidentsFilters}\n */\nfunction reduceNewFilters(state, newFilters) {\n    const { incidents, counts } = state,\n        newVisibleIds = new Set(),\n        newHiddenIds = new Set();\n    let newVisibleTotal = 0;\n\n    Object.values(incidents.map).forEach(incident => {\n        const isVisible = incidentIsVisible({ incident, filters: newFilters });\n\n        if (isVisible) {\n            newVisibleIds.add(incident._clientSideId);\n            newVisibleTotal += 1;\n        } else {\n            newHiddenIds.add(incident._clientSideId);\n        }\n    });\n\n    return {\n        ...state,\n        incidents: { ...incidents, visibleIds: newVisibleIds, hiddenIds: newHiddenIds },\n        counts: { ...counts, totalVisible: newVisibleTotal },\n        filters: newFilters\n    };\n}\n\n/**\n * Toggle a specific filter item\n *\n * @param state {IncidentsState}\n * @param payload {{ [group]: string, [filter]: string }}\n * @returns {IncidentsState}\n */\nfunction reduceToggleFilter(state, { group, district }) {\n    const newFilters = { ...state.filters };\n\n    if (group) {\n        if (newFilters.visibleGroups.has(group)) {\n            newFilters.visibleGroups.delete(group);\n        } else {\n            newFilters.visibleGroups.add(group);\n        }\n    }\n\n    if (district) {\n        if (newFilters.visibleDistricts.has(district)) {\n            newFilters.visibleDistricts.delete(district);\n        } else {\n            newFilters.visibleDistricts.add(district);\n        }\n    }\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceShowAllIncidentGroups(state) {\n    const { filters, counts } = state,\n        newFilters = { ...filters, visibleGroups: new Set(Object.keys(counts.perGroup)) };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceShowAllDistricts(state) {\n    const { filters, counts } = state,\n        newFilters = { ...filters, visibleDistricts: new Set(Object.keys(counts.perDistrict)) };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceHideAllIncidentGroups(state) {\n    const { filters } = state,\n        newFilters = { ...filters, visibleGroups: new Set() };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceHideAllDistricts(state) {\n    const { filters } = state,\n        newFilters = { ...filters, visibleDistricts: new Set() };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @param action {IncidentsAction}\n * @returns {IncidentsState}\n */\nfunction incidentsReducer(state, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case LOAD_INCIDENTS:\n            return reduceLoadIncidents(state, payload);\n        case TOGGLE_INCIDENT_GROUP:\n        case TOGGLE_DISTRICT:\n            return reduceToggleFilter(state, payload);\n        case SHOW_ALL_GROUPS:\n            return reduceShowAllIncidentGroups(state);\n        case SHOW_ALL_DISTRICTS:\n            return reduceShowAllDistricts(state);\n        case HIDE_ALL_GROUPS:\n            return reduceHideAllIncidentGroups(state);\n        case HIDE_ALL_DISTRICTS:\n            return reduceHideAllDistricts(state);\n        default:\n            throw Error(`Invalid incidents reducer action: ${type}`);\n    }\n}\n\nexport default function useIncidentsReducer() {\n    return useReducer(incidentsReducer, INITIAL_STATE);\n}\n","/**\n * @param state {IncidentsState}\n * @returns {number}\n */\nexport function getTotalIncidentCount(state) {\n    return state.counts.total;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {number}\n */\nexport function getVisibleIncidentCount(state) {\n    return state.counts.totalVisible;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Incident[]}\n */\nexport function getVisibleIncidents(state) {\n    const { visibleIds, map } = state.incidents,\n        result = [];\n\n    visibleIds.forEach(id => {\n        result.push(map[id]);\n    });\n\n    return result;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Set<string>}\n */\nexport function getVisibleIncidentGroups(state) {\n    return state.filters.visibleGroups;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Set<string>}\n */\nexport function getVisibleDistricts(state) {\n    return state.filters.visibleDistricts;\n}\n\n/**\n * @param state {IncidentsState}\n * @param {object}\n *  @param group {string}\n * @returns {number}\n */\nexport function getIncidentCountInGroup(state, { group }) {\n    return state.counts.perGroup[group];\n}\n\n/**\n * @param state {IncidentsState}\n * @param {object}\n *  @param district {string}\n * @returns {number}\n */\nexport function getIncidentCountInDistrict(state, { district }) {\n    return state.counts.perDistrict[district];\n}\n\n/**\n * Returns an array of group names sorted in descending order by their incident\n * count (except for 'Other' which goes to the bottom regardless)\n *\n * @param state {IncidentsState}\n * @returns {string[]}\n */\nexport function getSortedIncidentGroups(state) {\n    const { perGroup } = state.counts,\n        result = Object.keys(perGroup);\n\n    result.sort((a, b) => {\n        if (a === 'Other') return 1;\n        if (b === 'Other') return -1;\n        return perGroup[b] - perGroup[a];\n    });\n\n    return result;\n}\n\n/**\n * Returns an array of districts sorted in descending order by their incident\n * count\n *\n * @param state {IncidentsState}\n * @returns {string[]}\n */\nexport function getSortedDistricts(state) {\n    const { perDistrict } = state.counts,\n        result = Object.keys(perDistrict);\n\n    result.sort((a, b) => {\n        return perDistrict[b] - perDistrict[a];\n    });\n\n    return result;\n}\n","import useIncidentsReducer from './reducer';\nimport {\n    loadIncidents,\n    hideAllIncidentGroups,\n    showAllIncidentGroups,\n    toggleIncidentGroup,\n    toggleDistrict\n} from './actions';\nimport {\n    getVisibleIncidents,\n    getVisibleIncidentGroups,\n    getVisibleDistricts,\n    getTotalIncidentCount,\n    getVisibleIncidentCount,\n    getIncidentCountInDistrict,\n    getIncidentCountInGroup,\n    getSortedDistricts,\n    getSortedIncidentGroups\n} from './selectors';\n\n/**\n * @typedef Incident\n * @type {object}\n * @property {string} _clientSideId - client side unique generated id, e.g. \"_i7645\"\n * @property {string} INCIDENT_NUMBER - Unique server-side id, e.g \"I192075552\"\n * @property {string} STREET - e.g \"DUDLEY ST\"\n * @property {string} OFFENSE_DESCRIPTION - e.g \"WARRANT ARREST\"\n * @property {string} SHOOTING\n * @property {string} DISTRICT - e.g \"B2\"\n * @property {string} OFFENSE_CODE - e.g \"03125\"\n * @property {string} REPORTING_AREA\n * @property {string} OCCURRED_ON_DATE - e.g \"2019-09-19 19:08:00\"\n * @property {string} DAY_OF_WEEK - e.g \"Thursday\"\n * @property {string} MONTH - e.g \"9\"\n * @property {string} HOUR - e.g \"19\"\n * @property {string} YEAR - e.g \"2019\"\n * @property {string} Long - e.g \"42.38572465\"\n * @property {string} Lat - e.g \"-71.00661702\"\n * @property {string} OFFENSE_CODE_GROUP - e.g \"Warrant Arrests\"\n * @property {string} UCR_PART - e.g \"Part Three\"\n * @property {string} Location - Lat/long e.g \"(42.38572465, -71.00661702)\"\n */\n\n/**\n * @typedef IncidentsAction\n * @type {object}\n * @property {string} type\n * @property {object<*>} [payload]\n */\n\n/**\n * @typedef IncidentsFilters\n * @type {object}\n * @property {Set<string>} visibleGroups - Set of incident group names currently visible\n * @property {Set<string>} visibleDistricts - Set of districts currently visible\n */\n\n/**\n * @typedef IncidentsState\n * @type {object}\n * @property {object} incidents\n *  @property {{ [string]: Incident }} map - Map of unique ids to incidents\n *  @property {Set<string>} visibleIds - Ids of incidents to display, i.e those not currently filtered out\n *  @property {Set<string>} hiddenIds - Ids of incidents to hide, i.e those currently filtered out\n * @property {object} counts\n *  @property {number} total\n *  @property {number} totalVisible\n *  @property {{ [string]: number }} perGroup - Map of all incident group names to incident counts\n *  @property {{ [string]: number }} perDistrict - Map of all districts to incident counts\n * @property {IncidentsFilters} filters\n */\n\n// Actions creators:\nexport { loadIncidents, hideAllIncidentGroups, showAllIncidentGroups, toggleIncidentGroup, toggleDistrict };\n\n// Selectors:\nexport {\n    getVisibleIncidents,\n    getVisibleIncidentGroups,\n    getVisibleDistricts,\n    getTotalIncidentCount,\n    getVisibleIncidentCount,\n    getIncidentCountInDistrict,\n    getIncidentCountInGroup,\n    getSortedIncidentGroups,\n    getSortedDistricts\n};\n\n// Reducer:\nexport default useIncidentsReducer;\n","import React from 'react';\n\nimport './styles.scss';\n\nexport default function FilterGroup({ children, onSelectAll, onUnselectAll }) {\n    return (\n        <div className={'filterer'}>\n            <div className={'filterer-items'}>{children}</div>\n            <div className={'filterer-controls'}>\n                <div className={'filterer-bulk-actions'}>\n                    <div className={'filterer-bulk-action'} onClick={onSelectAll}>\n                        <span>Select All</span>\n                    </div>\n                    <div className={'filterer-bulk-action'} onClick={onUnselectAll}>\n                        <span>Unselect All</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport hexToRgba from 'hex-to-rgba';\n\nimport './styles.scss';\nimport { codeGroupScale } from '../../utils/codeGroups';\nimport {\n    hideAllIncidentGroups,\n    showAllIncidentGroups,\n    toggleIncidentGroup,\n    getIncidentCountInGroup,\n    getSortedIncidentGroups,\n    getVisibleIncidentGroups\n} from '../../state/incidents';\nimport FilterGroup from '../FilterGroup';\n\nexport default function IncidentGroupFilter({ incidentsState, dispatchIncidentsAction }) {\n    let groups = getSortedIncidentGroups(incidentsState),\n        visibleGroups = getVisibleIncidentGroups(incidentsState);\n\n    return (\n        <div className={'incident-group-filter'}>\n            <FilterGroup\n                onSelectAll={() => dispatchIncidentsAction(showAllIncidentGroups())}\n                onUnselectAll={() => dispatchIncidentsAction(hideAllIncidentGroups())}\n            >\n                {groups.map((group, i) => {\n                    const count = getIncidentCountInGroup(incidentsState, { group }),\n                        isVisible = visibleGroups.has(group),\n                        color = codeGroupScale(group);\n\n                    return (\n                        <div\n                            key={`input-group-${i}`}\n                            className={`incident-group ${isVisible ? '' : 'inactive'}`}\n                            onClick={() => dispatchIncidentsAction(toggleIncidentGroup(group))}\n                        >\n                            <div\n                                className={`incident-group__dot`}\n                                style={{\n                                    backgroundColor: isVisible ? hexToRgba(color, 0.5) : null,\n                                    borderColor: isVisible ? hexToRgba(color, 1) : '#d3d3d3'\n                                }}\n                            />\n                            <span className={'incident-group__name'}>{group}</span>\n                            <span className={'incident-group__count'}>{count}</span>\n                        </div>\n                    );\n                })}\n            </FilterGroup>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport './styles.scss';\nimport {\n    getIncidentCountInDistrict,\n    getSortedDistricts,\n    getVisibleDistricts,\n    toggleDistrict\n} from '../../state/incidents';\nimport FilterGroup from '../FilterGroup';\nimport { hideAllDistricts, showAllDistricts } from '../../state/incidents/actions';\n\nexport default function DistrictFilter({ incidentsState, dispatchIncidentsAction }) {\n    let districts = getSortedDistricts(incidentsState),\n        visibleDistricts = getVisibleDistricts(incidentsState);\n\n    return (\n        <div className={'district-filter'}>\n            <FilterGroup\n                onSelectAll={() => dispatchIncidentsAction(showAllDistricts())}\n                onUnselectAll={() => dispatchIncidentsAction(hideAllDistricts())}\n            >\n                {districts.map((district, i) => {\n                    const count = getIncidentCountInDistrict(incidentsState, { district }),\n                        isVisible = visibleDistricts.has(district);\n\n                    return (\n                        <div\n                            key={`district-${i}`}\n                            className={`district ${isVisible ? '' : 'inactive'}`}\n                            onClick={() => dispatchIncidentsAction(toggleDistrict(district))}\n                        >\n                            <div className={`district__marker`} />\n                            <span className={'district__name'}>{district}</span>\n                            <span className={'district__count'}>{count}</span>\n                        </div>\n                    );\n                })}\n            </FilterGroup>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { BarLoader } from 'react-spinners';\nimport { ReactSVG } from 'react-svg';\n\nimport arrows from '../../images/arrows.svg';\nimport controls from '../../images/controls.svg';\nimport './styles.scss';\nimport TimeframePicker from '../TimeframePicker';\nimport IncidentGroupFilter from '../IncidentGroupFilter';\nimport { getTotalIncidentCount, getVisibleIncidentCount } from '../../state/incidents';\nimport DistrictFilter from '../DistrictFilter';\n\nexport default function Menu({\n    timeframe,\n    dates,\n    onTimeframeChange,\n    isLoadingIncidents,\n    incidentsState,\n    dispatchIncidentsAction\n}) {\n    const { startDate, endDate } = dates,\n        total = getTotalIncidentCount(incidentsState),\n        visible = getVisibleIncidentCount(incidentsState),\n        hasIncidents = total > 0,\n        [collapsed, setCollapsed] = useState(false);\n\n    return (\n        <div className={`menu-root ${collapsed ? 'collapsed' : ''}`}>\n            <div className={'menu-title'}>\n                {collapsed && <h1>BPI</h1>}\n                {!collapsed && (\n                    <h1>\n                        Boston <br /> Police Incidents\n                    </h1>\n                )}\n            </div>\n\n            {collapsed && (\n                <div className={'menu-content menu-controls-icon'} onClick={() => setCollapsed(false)}>\n                    <ReactSVG src={controls} />\n                </div>\n            )}\n\n            {!collapsed && (\n                <div className={'menu-content'}>\n                    <div className={'menu-section'}>\n                        <h2 className={'menu-section-title'}>Date Range</h2>\n                        <span className={'menu-dates'}>{`${startDate.format(\n                            startDate.year === endDate.year ? 'MMM D' : 'MMM D, YYYY'\n                        )} – ${endDate.format('MMM D, YYYY')}`}</span>\n                        <TimeframePicker timeframe={timeframe} dates={dates} onTimeframeChange={onTimeframeChange} />\n                    </div>\n\n                    {isLoadingIncidents && (\n                        <div className={'menu-loader'}>\n                            <BarLoader size={50} color={'#98ff98'} loading={true} />\n                        </div>\n                    )}\n\n                    {!isLoadingIncidents && !hasIncidents && (\n                        <span>Oops. We couldn't find any incidents with location data for this date range</span>\n                    )}\n\n                    {!isLoadingIncidents && hasIncidents && (\n                        <>\n                            <div className={'menu-section'}>\n                                <div>{`Showing ${\n                                    visible === total ? `all ${total}` : `${visible} of ${total}`\n                                } incidents`}</div>\n                            </div>\n\n                            <h2 className={'menu-section-title'}>Incident Groups</h2>\n                            <div className={'menu-section menu-picker'}>\n                                <IncidentGroupFilter\n                                    incidentsState={incidentsState}\n                                    dispatchIncidentsAction={dispatchIncidentsAction}\n                                />\n                            </div>\n\n                            <h2 className={'menu-section-title'}>Districts</h2>\n                            <div className={'menu-section menu-picker'}>\n                                <DistrictFilter\n                                    incidentsState={incidentsState}\n                                    dispatchIncidentsAction={dispatchIncidentsAction}\n                                />\n                            </div>\n                        </>\n                    )}\n                </div>\n            )}\n\n            <div className={'menu-footer'}>\n                <div className='menu-collapser' onClick={() => setCollapsed(!collapsed)}>\n                    <div className='menu-arrows'>\n                        <ReactSVG src={arrows} />\n                    </div>\n                </div>\n\n                {collapsed && (\n                    <div className={'menu-attribution'}>\n                        <a href='https://www.codeforboston.org/' target='_blank' rel='noopener noreferrer'>\n                            C4B\n                        </a>\n                    </div>\n                )}\n\n                {!collapsed && (\n                    <div className={'menu-attribution'}>\n                        Made with ♥ by{' '}\n                        <a href='https://www.codeforboston.org/' target='_blank' rel='noopener noreferrer'>\n                            Code for Boston\n                        </a>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","import moment from 'moment';\n\nexport function getTimeframeDates({ timeframe, endDate = moment() }) {\n    const { value, unit } = timeframe;\n    return { startDate: moment(endDate).subtract(value, unit), endDate };\n}\n","import mockData from './data/1day';\n\nlet counter = 0;\n\n// Mocked version of the client returning mocked data, to develop offline\nexport async function getIncidents() {\n    const incidents = await new Promise(resolve => {\n        setTimeout(() => {\n            resolve(mockData);\n        }, 1000);\n    });\n\n    return incidents.map(r => {\n        counter += 1;\n        return { ...r, _clientSideId: `_i${counter}` };\n    });\n}\n","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport Map from './components/Map';\nimport Menu from './components/Menu';\nimport './styles/global.scss';\nimport { ONE_DAY } from './constants/timeframes';\nimport { getTimeframeDates } from './utils/timeframes';\n// import { getIncidents } from './utils/client';\nimport { getIncidents } from './mocks/client';\nimport useIncidentsReducer, { getVisibleIncidents, loadIncidents } from './state/incidents';\n\n// TODO: End date should be the present but BPD hasn't been updating their data while they work on\n// switching something or other about their systems, so for now we have to work with stale data\nconst END_DATE = moment('2019-09-20');\n\nexport default function App() {\n    const [loading, setLoading] = useState(true),\n        [timeframe, setTimeframe] = useState(ONE_DAY),\n        [dates, setDates] = useState(\n            getTimeframeDates({\n                timeframe,\n                endDate: END_DATE\n            })\n        ),\n        [incidentsState, dispatchIncidentsAction] = useIncidentsReducer();\n\n    useEffect(() => {\n        const { startDate, endDate } = getTimeframeDates({\n                timeframe,\n                endDate: END_DATE\n            }),\n            refreshIncidents = () => {\n                setLoading(true);\n                getIncidents({ startDate, endDate }).then(incidentsByGroup => {\n                    dispatchIncidentsAction(loadIncidents(incidentsByGroup));\n                    setLoading(false);\n                });\n            };\n\n        // Update dates in state:\n        setDates({ startDate, endDate });\n\n        // Refresh incidents in map:\n        refreshIncidents();\n\n        // Reset incidents periodically so new ones show up:\n        const intervalId = setInterval(refreshIncidents, 60 * 1000);\n        return () => clearInterval(intervalId);\n    }, [timeframe, dispatchIncidentsAction]);\n\n    return (\n        <div id='app-root'>\n            <Menu\n                timeframe={timeframe}\n                dates={dates}\n                onTimeframeChange={setTimeframe}\n                isLoadingIncidents={loading}\n                incidentsState={incidentsState}\n                dispatchIncidentsAction={dispatchIncidentsAction}\n            />\n            <Map incidents={getVisibleIncidents(incidentsState)} />\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/arrows.6820edc8.svg\";","module.exports = __webpack_public_path__ + \"static/media/controls.8fd6a55e.svg\";"],"sourceRoot":""}