{"version":3,"sources":["utils/codeGroups.js","components/Map/index.jsx","constants/timeframes.js","components/TimeframePicker/index.jsx","state/incidents/actions.js","utils/incidents.js","state/incidents/reducer.js","state/incidents/selectors.js","state/incidents/index.js","components/FilterGroup/index.jsx","constants/locale.js","components/IncidentGroupFilter/index.jsx","constants/districts.js","utils/districts.js","components/DistrictFilter/index.jsx","components/Menu/index.jsx","utils/timeframes.js","utils/client.js","components/IncidentCard/index.jsx","components/IncidentFeed/index.jsx","App.js","serviceWorker.js","index.js","images/arrows.svg","images/controls.svg"],"names":["incidentGroupNames","Set","Object","values","INCIDENT_GROUPS","forEach","GROUP","add","codeGroupScale","scaleOrdinal","schemeSet3","domain","getIncidentGroupName","incident","code","parseInt","OFFENSE_CODE","group","console","log","TILE_LAYER_URL","TILE_LAYER_ATTRIBUTION","BOS_LAT_LONG","BOS_LIMITS","getIncidentMarker","latLng","cg","properties","leaflet","radius","color","weight","opacity","fillOpacity","bindIncidentPopup","feature","layer","list","keys","filter","p","startsWith","map","replace","bindPopup","IncidentMap","incidents","geojsonData","geojson","parse","Point","className","Map","center","bounds","TileLayer","url","attribution","GeoJSON","key","Math","random","data","pointToLayer","onEachFeature","ONE_DAY","value","unit","TIMEFRAMES","options","t","label","TimeframePicker","timeframe","onTimeframeChange","timeframeIndex","findIndex","isEqual","classNamePrefix","onChange","theme","borderRadius","colors","primary","primary75","primary25","neutral0","spacing","menuGutter","controlHeight","LOAD_INCIDENTS","LOAD_INCIDENTS_AND_RESET_FILTERS","TOGGLE_INCIDENT_GROUP","TOGGLE_DISTRICT","HIDE_ALL_GROUPS","HIDE_ALL_DISTRICTS","SHOW_ALL_GROUPS","SHOW_ALL_DISTRICTS","RESET_FILTERS","toggleIncidentGroup","type","payload","toggleDistrict","district","hideAllIncidentGroups","hideAllDistricts","sortIncidentsByDescendingDate","sort","a","b","dateA","moment","OCCURRED_ON_DATE","dateB","isValid","diff","INITIAL_STATE","sortedByDate","visibleIds","hiddenIds","counts","total","totalVisible","perGroup","perDistrict","filters","visibleGroups","groupsChanged","visibleDistricts","districtsChanged","incidentIsVisible","has","DISTRICT","reduceLoadIncidents","state","groupsPreviouslyFiltered","districtsPreviouslyFiltered","groupName","_clientSideId","reduceNewFilters","newFilters","newVisibleIds","newHiddenIds","newVisibleTotal","reduceResetFilters","incidentsReducer","action","delete","reduceToggleFilter","reduceShowAllIncidentGroups","reduceShowAllDistricts","reduceHideAllIncidentGroups","reduceHideAllDistricts","Error","getVisibleIncidents","result","id","push","useIncidentsReducer","useReducer","FilterGroup","title","summary","children","onSelectAll","onUnselectAll","useState","expanded","setExpanded","onClick","src","arrows","LOCALE","IncidentGroupFilter","incidentsState","dispatchIncidentsAction","groups","getSortedIncidentGroups","groupsCount","length","toLocaleString","visibleGroupsCount","size","i","count","getIncidentCountInGroup","isVisible","onDoubleClick","style","backgroundColor","hexToRgba","borderColor","A1","name","A7","A15","B2","B3","C6","C11","D4","D14","E5","E13","E18","getDistrictName","districtInfo","districtCode","isEmpty","DISTRICTS","toUpperCase","getDistrictInfo","DistrictFilter","districts","getSortedDistricts","d","districtCount","visibleDistrictCount","getIncidentCountInDistrict","districtName","Menu","dates","isLoadingIncidents","startDate","endDate","visible","getVisibleIncidentCount","hasIncidents","collapsed","setCollapsed","controls","format","year","loading","href","target","rel","getTimeframeDates","subtract","BASE_SQL_QUERY_URL","DATE_FORMAT","counter","getIncidents","async","sqlQuery","fetch","res","json","records","r","IncidentCard","incidentGroupName","groupColor","OFFENSE_DESCRIPTION","STREET","IncidentFeed","onIncidentClick","slice","END_DATE","Boolean","window","location","hostname","match","ReactDOM","render","setLoading","setTimeframe","setDates","useEffect","then","loadIncidentsAndResetFilters","intervalId","setInterval","loadIncidents","clearInterval","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.020b9bbf.chunk.js","sourcesContent":["import { scaleOrdinal } from 'd3-scale';\nimport { schemeSet3 } from 'd3-scale-chromatic';\nimport INCIDENT_GROUPS from '../constants/incident-groups';\n\nconst incidentGroupNames = new Set();\n\nObject.values(INCIDENT_GROUPS).forEach(({ GROUP }) => {\n    incidentGroupNames.add(GROUP);\n});\n\n/**\n * Returns a scale to color the offense code groups\n */\nexport const codeGroupScale = scaleOrdinal(schemeSet3).domain(incidentGroupNames);\n\n/**\n * Gets the incident group name matching the provided incident's offense code\n * @param incident [Incident]\n * @returns {string} - Group name\n */\nexport function getIncidentGroupName(incident) {\n    const code = parseInt(incident.OFFENSE_CODE, 10),\n        group = INCIDENT_GROUPS[code];\n\n    if (!group) {\n        // TODO: Report these somewhere, instead of just logging them\n        console.log(`Incident with unknown group code found: ${group}. Assigning to \"Other\"`);\n        console.log(group);\n    }\n\n    return group ? group.GROUP : 'Other';\n}\n","import React from 'react';\nimport geojson from 'geojson';\nimport * as leaflet from 'leaflet';\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet';\n\nimport './styles.scss';\nimport { codeGroupScale, getIncidentGroupName } from '../../utils/codeGroups';\n\nconst TILE_LAYER_URL = 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',\n    TILE_LAYER_ATTRIBUTION =\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    BOS_LAT_LONG = [42.32390487760298, -71.07416152954103],\n    BOS_LIMITS = [\n        [42.393518, -71.00516847],\n        [42.24042076, -71.16843346]\n    ];\n\nfunction getIncidentMarker(incident, latLng) {\n    const cg = getIncidentGroupName(incident.properties);\n    return leaflet.circleMarker(latLng, {\n        radius: 4,\n        color: codeGroupScale(cg),\n        weight: 1,\n        opacity: 0.5,\n        fillOpacity: 0.25\n    });\n}\n\nfunction bindIncidentPopup(feature, layer) {\n    const properties = Object.keys(feature.properties).filter(p => !p.startsWith('_'));\n    const list = properties.map(p => `<tr><th>${p.replace(/_/g, ' ')}</th><td>${feature.properties[p]}<td></tr>`);\n    layer.bindPopup(`<table><tbody>${list}</tbody></table>`);\n}\n\n/**\n * @returns React component\n * @constructor\n */\nexport default function IncidentMap({ incidents }) {\n    const geojsonData = geojson.parse(incidents, { Point: ['Lat', 'Long'] });\n\n    return (\n        <div className='map-root'>\n            <Map center={BOS_LAT_LONG} bounds={BOS_LIMITS}>\n                <TileLayer url={TILE_LAYER_URL} attribution={TILE_LAYER_ATTRIBUTION} />\n                <GeoJSON\n                    key={Math.random()}\n                    data={geojsonData}\n                    pointToLayer={getIncidentMarker}\n                    onEachFeature={bindIncidentPopup}\n                />\n            </Map>\n        </div>\n    );\n}\n","export const ONE_HOUR = { value: 1, unit: 'hour' };\nexport const ONE_DAY = { value: 1, unit: 'day' };\nexport const SEVEN_DAYS = { value: 7, unit: 'days' };\nexport const THIRTY_DAYS = { value: 30, unit: 'days' };\n// export const THREE_MONTHS = { value: 3, unit: 'months' };\n// export const SIX_MONTHS = { value: 6, unit: 'months' };\n// export const ONE_YEAR = { value: 1, unit: 'year' };\n\nexport const TIMEFRAMES = [ONE_HOUR, ONE_DAY, SEVEN_DAYS, THIRTY_DAYS];\n","import React from 'react';\nimport Select from 'react-select';\nimport isEqual from 'lodash/isEqual';\n\nimport './styles.scss';\nimport { TIMEFRAMES } from '../../constants/timeframes';\n\nconst options = TIMEFRAMES.map(t => {\n    return { value: t, label: `${t.value} ${t.unit}` };\n});\n\nexport default function TimeframePicker({ timeframe, onTimeframeChange }) {\n    const timeframeIndex = TIMEFRAMES.findIndex(t => isEqual(t, timeframe));\n\n    return (\n        <div className={'timeframe-picker'}>\n            <Select\n                className={'timeframe-picker__selector'}\n                classNamePrefix={'react-select'}\n                value={options[timeframeIndex]}\n                onChange={t => onTimeframeChange(t.value)}\n                options={options}\n                theme={theme => ({\n                    ...theme,\n                    borderRadius: 0,\n                    colors: {\n                        ...theme.colors,\n                        primary: '#fefffe',\n                        primary75: '#1086ff',\n                        primary25: '#1086ff',\n                        neutral0: '#33323c'\n                    },\n                    spacing: {\n                        ...theme.spacing,\n                        menuGutter: 0,\n                        controlHeight: 30\n                    }\n                })}\n            />\n        </div>\n    );\n}\n","/**\n *\n * @type {string}\n */\nexport const LOAD_INCIDENTS = 'load-incidents';\nexport const LOAD_INCIDENTS_AND_RESET_FILTERS = 'load-incidents-and-reset-filters';\nexport const TOGGLE_INCIDENT_GROUP = 'toggle-group';\nexport const TOGGLE_DISTRICT = 'toggle-district';\nexport const HIDE_ALL_GROUPS = 'hide-all-groups';\nexport const HIDE_ALL_DISTRICTS = 'hide-all-districts';\nexport const SHOW_ALL_GROUPS = 'show-all-groups';\nexport const SHOW_ALL_DISTRICTS = 'show-all-districts';\nexport const RESET_FILTERS = 'reset-filters';\n\n/**\n * @param {Incident[]} incidents\n * @returns {IncidentsAction<{ incidents: Incident[] }>}\n */\nexport function loadIncidents(incidents) {\n    return { type: LOAD_INCIDENTS, payload: { incidents } };\n}\n\n/**\n * @param {Incident[]} incidents\n * @returns {IncidentsAction<{ incidents: Incident[] }>}\n */\nexport function loadIncidentsAndResetFilters(incidents) {\n    return { type: LOAD_INCIDENTS_AND_RESET_FILTERS, payload: { incidents } };\n}\n\n/**\n * @param {string} group\n * @returns {IncidentsAction<{ group: string }>}\n */\nexport function toggleIncidentGroup(group) {\n    return { type: TOGGLE_INCIDENT_GROUP, payload: { group } };\n}\n\n/**\n * @param {string} district\n * @returns {IncidentsAction<{ district: string }>}\n */\nexport function toggleDistrict(district) {\n    return { type: TOGGLE_DISTRICT, payload: { district } };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function showAllIncidentGroups() {\n    return { type: SHOW_ALL_GROUPS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function showAllDistricts() {\n    return { type: SHOW_ALL_DISTRICTS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function hideAllIncidentGroups() {\n    return { type: HIDE_ALL_GROUPS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function hideAllDistricts() {\n    return { type: HIDE_ALL_DISTRICTS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function resetFilters() {\n    return { type: RESET_FILTERS };\n}\n","import moment from 'moment';\n\n/**\n *\n * @param incidents {Incident[]}\n * @returns {Incident[]}\n */\nexport function sortIncidentsByDescendingDate(incidents) {\n    return incidents.sort((a, b) => {\n        const dateA = moment(a.OCCURRED_ON_DATE),\n            dateB = moment(b.OCCURRED_ON_DATE);\n        return dateA.isValid() && dateB.isValid() ? dateB.diff(dateA) : -1;\n    });\n}\n","import { useReducer } from 'react';\n\nimport {\n    HIDE_ALL_DISTRICTS,\n    HIDE_ALL_GROUPS,\n    LOAD_INCIDENTS,\n    LOAD_INCIDENTS_AND_RESET_FILTERS,\n    RESET_FILTERS,\n    SHOW_ALL_DISTRICTS,\n    SHOW_ALL_GROUPS,\n    TOGGLE_DISTRICT,\n    TOGGLE_INCIDENT_GROUP\n} from './actions';\nimport { getIncidentGroupName } from '../../utils/codeGroups';\nimport { sortIncidentsByDescendingDate } from '../../utils/incidents';\n\nconst INITIAL_STATE = {\n    incidents: {\n        map: {},\n        sortedByDate: [],\n        visibleIds: new Set(),\n        hiddenIds: new Set()\n    },\n    counts: {\n        total: 0,\n        totalVisible: 0,\n        perGroup: {},\n        perDistrict: {}\n    },\n    filters: {\n        visibleGroups: new Set(),\n        groupsChanged: false,\n        visibleDistricts: new Set(),\n        districtsChanged: false\n    }\n};\n\n/**\n * Determine whether the incident should be visible according to the provided filters\n *\n * @param incident {Incident}\n * @param filters {IncidentsFilters}\n * @returns {boolean}\n */\nfunction incidentIsVisible({ incident, filters }) {\n    const { visibleGroups, visibleDistricts } = filters;\n    return visibleGroups.has(getIncidentGroupName(incident)) && visibleDistricts.has(incident.DISTRICT);\n}\n\n/**\n * Resets state (including filters and counts) with a new set of incidents\n *\n * @param state {IncidentsState}\n * @param payload {{ incidents: Incident[] }}\n * @returns {IncidentsState}\n */\nfunction reduceLoadIncidents(state, { incidents }) {\n    const visibleIds = new Set(),\n        groupsPreviouslyFiltered = state.filters.groupsChanged,\n        districtsPreviouslyFiltered = state.filters.districtsChanged,\n        visibleGroups = groupsPreviouslyFiltered ? state.filters.visibleGroups : new Set(),\n        visibleDistricts = districtsPreviouslyFiltered ? state.filters.visibleDistricts : new Set(),\n        map = {},\n        perGroup = {},\n        perDistrict = {};\n\n    let total = 0,\n        totalVisible = 0;\n\n    // First reset filters and counts:\n    incidents.forEach(incident => {\n        const groupName = getIncidentGroupName(incident),\n            district = incident.DISTRICT;\n\n        map[incident._clientSideId] = incident;\n        total += 1;\n\n        !perGroup[groupName] && (perGroup[groupName] = 0);\n        perGroup[groupName] += 1;\n        !groupsPreviouslyFiltered && visibleGroups.add(groupName);\n\n        !perDistrict[district] && (perDistrict[district] = 0);\n        perDistrict[district] += 1;\n        !districtsPreviouslyFiltered && visibleDistricts.add(district);\n    });\n\n    // Then reset visible ids and totals:\n    incidents.forEach(incident => {\n        if (incidentIsVisible({ incident, filters: { visibleDistricts, visibleGroups } })) {\n            visibleIds.add(incident._clientSideId);\n            totalVisible += 1;\n        }\n    });\n\n    return {\n        incidents: { map, hiddenIds: new Set(), visibleIds, sortedByDate: sortIncidentsByDescendingDate(incidents) },\n        counts: { total, totalVisible, perGroup, perDistrict },\n        filters: { visibleGroups, visibleDistricts }\n    };\n}\n\n/**\n * Reduces the provided state in accordance with the provided filters\n *\n * @param state {IncidentsState}\n * @param newFilters {IncidentsFilters}\n */\nfunction reduceNewFilters(state, newFilters) {\n    const { incidents, counts } = state,\n        newVisibleIds = new Set(),\n        newHiddenIds = new Set();\n    let newVisibleTotal = 0;\n\n    Object.values(incidents.map).forEach(incident => {\n        const isVisible = incidentIsVisible({ incident, filters: newFilters });\n\n        if (isVisible) {\n            newVisibleIds.add(incident._clientSideId);\n            newVisibleTotal += 1;\n        } else {\n            newHiddenIds.add(incident._clientSideId);\n        }\n    });\n\n    return {\n        ...state,\n        incidents: { ...incidents, visibleIds: newVisibleIds, hiddenIds: newHiddenIds },\n        counts: { ...counts, totalVisible: newVisibleTotal },\n        filters: newFilters\n    };\n}\n\n/**\n * Toggle a specific filter item\n *\n * @param state {IncidentsState}\n * @param payload {{ [group]: string, [filter]: string }}\n * @returns {IncidentsState}\n */\nfunction reduceToggleFilter(state, { group, district }) {\n    const newFilters = { ...state.filters };\n\n    if (group) {\n        newFilters.groupsChanged = true;\n\n        if (newFilters.visibleGroups.has(group)) {\n            newFilters.visibleGroups.delete(group);\n        } else {\n            newFilters.visibleGroups.add(group);\n        }\n    }\n\n    if (district) {\n        newFilters.districtsChanged = true;\n\n        if (newFilters.visibleDistricts.has(district)) {\n            newFilters.visibleDistricts.delete(district);\n        } else {\n            newFilters.visibleDistricts.add(district);\n        }\n    }\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceShowAllIncidentGroups(state) {\n    const { filters, counts } = state,\n        newFilters = { ...filters, visibleGroups: new Set(Object.keys(counts.perGroup)), groupsChanged: true };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceShowAllDistricts(state) {\n    const { filters, counts } = state,\n        newFilters = { ...filters, visibleDistricts: new Set(Object.keys(counts.perDistrict)), districtsChanged: true };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceHideAllIncidentGroups(state) {\n    const { filters } = state,\n        newFilters = { ...filters, visibleGroups: new Set(), groupsChanged: true };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceHideAllDistricts(state) {\n    const { filters } = state,\n        newFilters = { ...filters, visibleDistricts: new Set(), districtsChanged: true };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceResetFilters(state) {\n    return {\n        ...state,\n        filters: {\n            visibleGroups: new Set(Object.keys(state.counts.perGroup)),\n            groupsChanged: false,\n            visibleDistricts: new Set(Object.keys(state.counts.perDistrict)),\n            districtsChanged: false\n        }\n    };\n}\n\n/**\n * @param state {IncidentsState}\n * @param action {IncidentsAction}\n * @returns {IncidentsState}\n */\nfunction incidentsReducer(state, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case LOAD_INCIDENTS:\n            return reduceLoadIncidents(state, payload);\n        case LOAD_INCIDENTS_AND_RESET_FILTERS:\n            return reduceLoadIncidents(reduceResetFilters(state), payload);\n        case TOGGLE_INCIDENT_GROUP:\n        case TOGGLE_DISTRICT:\n            return reduceToggleFilter(state, payload);\n        case SHOW_ALL_GROUPS:\n            return reduceShowAllIncidentGroups(state);\n        case SHOW_ALL_DISTRICTS:\n            return reduceShowAllDistricts(state);\n        case HIDE_ALL_GROUPS:\n            return reduceHideAllIncidentGroups(state);\n        case HIDE_ALL_DISTRICTS:\n            return reduceHideAllDistricts(state);\n        case RESET_FILTERS:\n            return reduceResetFilters(state);\n        default:\n            throw Error(`Invalid incidents reducer action: ${type}`);\n    }\n}\n\nexport default function useIncidentsReducer() {\n    return useReducer(incidentsReducer, INITIAL_STATE);\n}\n","/**\n * @param state {IncidentsState}\n * @returns {number}\n */\nexport function getTotalIncidentCount(state) {\n    return state.counts.total;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {number}\n */\nexport function getVisibleIncidentCount(state) {\n    return state.counts.totalVisible;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Incident[]}\n */\nexport function getAllIncidents(state) {\n    return state.incidents.sortedByDate;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Incident[]}\n */\nexport function getVisibleIncidents(state) {\n    const { visibleIds, map } = state.incidents,\n        result = [];\n\n    visibleIds.forEach(id => {\n        result.push(map[id]);\n    });\n\n    return result;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Set<string>}\n */\nexport function getVisibleIncidentGroups(state) {\n    return state.filters.visibleGroups;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Set<string>}\n */\nexport function getVisibleDistricts(state) {\n    return state.filters.visibleDistricts;\n}\n\n/**\n * @param state {IncidentsState}\n * @param {object}\n *  @param group {string}\n * @returns {number}\n */\nexport function getIncidentCountInGroup(state, { group }) {\n    return state.counts.perGroup[group];\n}\n\n/**\n * @param state {IncidentsState}\n * @param {object}\n *  @param district {string}\n * @returns {number}\n */\nexport function getIncidentCountInDistrict(state, { district }) {\n    return state.counts.perDistrict[district];\n}\n\n/**\n * Returns an array of group names sorted in descending order by their incident\n * count (except for 'Other' which goes to the bottom regardless)\n *\n * @param state {IncidentsState}\n * @returns {string[]}\n */\nexport function getSortedIncidentGroups(state) {\n    const { perGroup } = state.counts,\n        result = Object.keys(perGroup);\n\n    result.sort((a, b) => {\n        if (a === 'Other') return 1;\n        if (b === 'Other') return -1;\n        return perGroup[b] - perGroup[a];\n    });\n\n    return result;\n}\n\n/**\n * Returns an array of districts sorted in descending order by their incident\n * count\n *\n * @param state {IncidentsState}\n * @returns {string[]}\n */\nexport function getSortedDistricts(state) {\n    const { perDistrict } = state.counts,\n        result = Object.keys(perDistrict);\n\n    result.sort((a, b) => {\n        return perDistrict[b] - perDistrict[a];\n    });\n\n    return result;\n}\n","import useIncidentsReducer from './reducer';\nimport {\n    loadIncidents,\n    hideAllIncidentGroups,\n    showAllIncidentGroups,\n    toggleIncidentGroup,\n    toggleDistrict\n} from './actions';\nimport {\n    getVisibleIncidents,\n    getVisibleIncidentGroups,\n    getVisibleDistricts,\n    getTotalIncidentCount,\n    getVisibleIncidentCount,\n    getIncidentCountInDistrict,\n    getIncidentCountInGroup,\n    getSortedDistricts,\n    getSortedIncidentGroups\n} from './selectors';\n\n/**\n * @typedef Incident\n * @type {object}\n * @property {string} _clientSideId - client side unique generated id, e.g. \"_i7645\"\n * @property {string} INCIDENT_NUMBER - Unique server-side id, e.g \"I192075552\"\n * @property {string} STREET - e.g \"DUDLEY ST\"\n * @property {string} OFFENSE_DESCRIPTION - e.g \"WARRANT ARREST\"\n * @property {string} SHOOTING\n * @property {string} DISTRICT - e.g \"B2\"\n * @property {string} OFFENSE_CODE - e.g \"03125\"\n * @property {string} REPORTING_AREA\n * @property {string} OCCURRED_ON_DATE - e.g \"2019-09-19 19:08:00\"\n * @property {string} DAY_OF_WEEK - e.g \"Thursday\"\n * @property {string} MONTH - e.g \"9\"\n * @property {string} HOUR - e.g \"19\"\n * @property {string} YEAR - e.g \"2019\"\n * @property {string} Long - e.g \"42.38572465\"\n * @property {string} Lat - e.g \"-71.00661702\"\n * @property {string} OFFENSE_CODE_GROUP - e.g \"Warrant Arrests\"\n * @property {string} UCR_PART - e.g \"Part Three\"\n * @property {string} Location - Lat/long e.g \"(42.38572465, -71.00661702)\"\n */\n\n/**\n * @typedef IncidentsAction\n * @type {object}\n * @property {string} type\n * @property {object<*>} [payload]\n */\n\n/**\n * @typedef IncidentsFilters\n * @type {object}\n * @property {Set<string>} visibleGroups - Set of incident group names currently visible\n * @property {Set<string>} visibleDistricts - Set of districts currently visible\n */\n\n/**\n * @typedef IncidentsState\n * @type {object}\n * @property {object} incidents\n *  @property {Incident[]} sortedByDate - Array of incidents sorted by descending date\n *  @property {{ [string]: Incident }} map - Map of unique ids to incidents\n *  @property {Set<string>} visibleIds - Ids of incidents to display, i.e those not currently filtered out\n *  @property {Set<string>} hiddenIds - Ids of incidents to hide, i.e those currently filtered out\n * @property {object} counts\n *  @property {number} total\n *  @property {number} totalVisible\n *  @property {{ [string]: number }} perGroup - Map of all incident group names to incident counts\n *  @property {boolean} groupsChanged - Has the user changed the group filter from the default set\n *  @property {{ [string]: number }} perDistrict - Map of all districts to incident counts\n *  @property {boolean} districtsChanged - Has the user changed the districts filter from the default set\n * @property {IncidentsFilters} filters\n */\n\n// Actions creators:\nexport { loadIncidents, hideAllIncidentGroups, showAllIncidentGroups, toggleIncidentGroup, toggleDistrict };\n\n// Selectors:\nexport {\n    getVisibleIncidents,\n    getVisibleIncidentGroups,\n    getVisibleDistricts,\n    getTotalIncidentCount,\n    getVisibleIncidentCount,\n    getIncidentCountInDistrict,\n    getIncidentCountInGroup,\n    getSortedIncidentGroups,\n    getSortedDistricts\n};\n\n// Reducer:\nexport default useIncidentsReducer;\n","import React, { useState } from 'react';\n\nimport './styles.scss';\nimport { ReactSVG } from 'react-svg';\nimport arrows from '../../images/arrows.svg';\n\nexport default function FilterGroup({ title, summary, children, onSelectAll, onUnselectAll }) {\n    const [expanded, setExpanded] = useState(false);\n\n    return (\n        <div className={`filterer ${expanded ? 'filterer__expanded' : ''}`}>\n            <div className={'filterer-header'} onClick={() => setExpanded(!expanded)}>\n                <span className={'filterer-title'}>{title}</span>\n                <div className={`filterer-header-arrows ${expanded ? 'filterer-header-arrows__point-up' : ''}`}>\n                    <ReactSVG src={arrows} />\n                </div>\n            </div>\n            {!expanded && summary && (\n                <div className={'filterer-summary'} onClick={() => setExpanded(!expanded)}>\n                    {summary}\n                </div>\n            )}\n            {expanded && (\n                <>\n                    <div className={'filterer-items'}>{children}</div>\n                    <div className={'filterer-controls'}>\n                        <div className={'filterer-bulk-actions'}>\n                            <div className={'filterer-bulk-action'} onClick={onSelectAll}>\n                                <span>Select All</span>\n                            </div>\n                            <div className={'filterer-bulk-action'} onClick={onUnselectAll}>\n                                <span>Unselect All</span>\n                            </div>\n                        </div>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n","export const LOCALE = 'en-US';\n","import React from 'react';\nimport hexToRgba from 'hex-to-rgba';\n\nimport './styles.scss';\nimport { codeGroupScale } from '../../utils/codeGroups';\nimport {\n    hideAllIncidentGroups,\n    showAllIncidentGroups,\n    toggleIncidentGroup,\n    getIncidentCountInGroup,\n    getSortedIncidentGroups,\n    getVisibleIncidentGroups\n} from '../../state/incidents';\nimport FilterGroup from '../FilterGroup';\nimport { LOCALE } from '../../constants/locale';\n\nexport default function IncidentGroupFilter({ incidentsState, dispatchIncidentsAction }) {\n    let groups = getSortedIncidentGroups(incidentsState),\n        visibleGroups = getVisibleIncidentGroups(incidentsState),\n        groupsCount = groups.length.toLocaleString(LOCALE),\n        visibleGroupsCount = visibleGroups.size.toLocaleString(LOCALE);\n\n    return (\n        <div className={'incident-group-filter'}>\n            <FilterGroup\n                title={'Incident Groups'}\n                summary={\n                    visibleGroups.size === groups.length\n                        ? `Showing all ${groupsCount} incident groups`\n                        : `Showing ${visibleGroupsCount} of ${groupsCount} incident groups`\n                }\n                onSelectAll={() => dispatchIncidentsAction(showAllIncidentGroups())}\n                onUnselectAll={() => dispatchIncidentsAction(hideAllIncidentGroups())}\n            >\n                {groups.map((group, i) => {\n                    const count = getIncidentCountInGroup(incidentsState, { group }).toLocaleString(LOCALE),\n                        isVisible = visibleGroups.has(group),\n                        color = codeGroupScale(group);\n\n                    return (\n                        <div\n                            key={`input-group-${i}`}\n                            className={`incident-group ${isVisible ? '' : 'inactive'}`}\n                            onClick={() => dispatchIncidentsAction(toggleIncidentGroup(group))}\n                            onDoubleClick={() => {\n                                dispatchIncidentsAction(hideAllIncidentGroups());\n                                dispatchIncidentsAction(toggleIncidentGroup(group));\n                            }}\n                        >\n                            <div\n                                className={`incident-group__dot`}\n                                style={{\n                                    backgroundColor: isVisible ? hexToRgba(color, 0.5) : null,\n                                    borderColor: isVisible ? hexToRgba(color, 1) : '#d3d3d3'\n                                }}\n                            />\n                            <span className={'incident-group__name'}>{group}</span>\n                            <span className={'incident-group__count'}>{count}</span>\n                        </div>\n                    );\n                })}\n            </FilterGroup>\n        </div>\n    );\n}\n","export default {\n    A1: {\n        name: 'Downtown'\n    },\n    A7: {\n        name: 'East Boston'\n    },\n    A15: {\n        name: 'Charlestown'\n    },\n    B2: {\n        name: 'Roxbury'\n    },\n    B3: {\n        name: 'Mattapan'\n    },\n    C6: {\n        name: 'South Boston'\n    },\n    C11: {\n        name: 'Dorchester'\n    },\n    D4: {\n        name: 'South End'\n    },\n    D14: {\n        name: 'Brighton'\n    },\n    E5: {\n        name: 'West Roxbury'\n    },\n    E13: {\n        name: 'Jamaica Plain'\n    },\n    E18: {\n        name: 'Hyde Park'\n    }\n};\n","import isEmpty from 'lodash/isEmpty';\nimport DISTRICTS from '../constants/districts';\n\n/**\n * @param {object}\n *  @property districtCode {string} - e.g \"B2\"\n * @returns {string|undefined}\n */\nexport function getDistrictName({ districtCode }) {\n    const districtInfo = getDistrictInfo({ districtCode });\n\n    return districtInfo && districtInfo.name;\n}\n\nexport function getDistrictInfo({ districtCode }) {\n    if (isEmpty(districtCode)) {\n        return;\n    }\n\n    return DISTRICTS[districtCode.toUpperCase()];\n}\n","import React from 'react';\n\nimport './styles.scss';\nimport {\n    getIncidentCountInDistrict,\n    getSortedDistricts,\n    getVisibleDistricts,\n    toggleDistrict\n} from '../../state/incidents';\nimport FilterGroup from '../FilterGroup';\nimport { hideAllDistricts, showAllDistricts } from '../../state/incidents/actions';\nimport { getDistrictName } from '../../utils/districts';\nimport { LOCALE } from '../../constants/locale';\n\nexport default function DistrictFilter({ incidentsState, dispatchIncidentsAction }) {\n    let districts = getSortedDistricts(incidentsState).filter(d => !!d),\n        visibleDistricts = getVisibleDistricts(incidentsState),\n        districtCount = districts.length.toLocaleString(LOCALE),\n        visibleDistrictCount = visibleDistricts.size.toLocaleString(LOCALE);\n\n    return (\n        <div className={'district-filter'}>\n            <FilterGroup\n                title={'Districts'}\n                summary={\n                    visibleDistricts.size === districts.length\n                        ? `Showing all ${districtCount} districts`\n                        : `Showing ${visibleDistrictCount} of ${districtCount} districts`\n                }\n                onSelectAll={() => dispatchIncidentsAction(showAllDistricts())}\n                onUnselectAll={() => dispatchIncidentsAction(hideAllDistricts())}\n            >\n                {districts.map((district, i) => {\n                    const count = getIncidentCountInDistrict(incidentsState, { district }).toLocaleString(LOCALE),\n                        isVisible = visibleDistricts.has(district),\n                        districtName = getDistrictName({ districtCode: district });\n\n                    if (!districtName) {\n                        return null;\n                    }\n\n                    return (\n                        <div\n                            key={`district-${i}`}\n                            className={`district ${isVisible ? '' : 'inactive'}`}\n                            onClick={() => dispatchIncidentsAction(toggleDistrict(district))}\n                            onDoubleClick={() => {\n                                dispatchIncidentsAction(hideAllDistricts());\n                                dispatchIncidentsAction(toggleDistrict(district));\n                            }}\n                        >\n                            <div className={`district__marker`} />\n                            <span className={'district__name'}>{districtName}</span>\n                            <span className={'district__count'}>{count}</span>\n                        </div>\n                    );\n                })}\n            </FilterGroup>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { BarLoader } from 'react-spinners';\nimport { ReactSVG } from 'react-svg';\n\nimport arrows from '../../images/arrows.svg';\nimport controls from '../../images/controls.svg';\nimport './styles.scss';\nimport TimeframePicker from '../TimeframePicker';\nimport IncidentGroupFilter from '../IncidentGroupFilter';\nimport { getTotalIncidentCount, getVisibleIncidentCount } from '../../state/incidents';\nimport DistrictFilter from '../DistrictFilter';\nimport { LOCALE } from '../../constants/locale';\n\nexport default function Menu({\n    timeframe,\n    dates,\n    onTimeframeChange,\n    isLoadingIncidents,\n    incidentsState,\n    dispatchIncidentsAction\n}) {\n    const { startDate, endDate } = dates,\n        total = getTotalIncidentCount(incidentsState),\n        visible = getVisibleIncidentCount(incidentsState),\n        hasIncidents = total > 0,\n        [collapsed, setCollapsed] = useState(false);\n\n    return (\n        <div className={`menu-root ${collapsed ? 'collapsed' : ''}`}>\n            <div className={'menu-title'}>\n                {collapsed && <h1>BPI</h1>}\n                {!collapsed && (\n                    <h1>\n                        Boston <br /> Police Incidents\n                    </h1>\n                )}\n            </div>\n\n            {collapsed && (\n                <div className={'menu-content menu-controls-icon'} onClick={() => setCollapsed(false)}>\n                    <ReactSVG src={controls} />\n                </div>\n            )}\n\n            {!collapsed && (\n                <div className={'menu-content'}>\n                    <div className={'menu-section menu-date-section'}>\n                        <h2 className={'menu-section-title'}>Date Range</h2>\n                        <span className={'menu-dates'}>{`${startDate.format(\n                            startDate.year === endDate.year ? 'MMM D' : 'MMM D, YYYY'\n                        )} – ${endDate.format('MMM D, YYYY')}`}</span>\n                        <TimeframePicker timeframe={timeframe} dates={dates} onTimeframeChange={onTimeframeChange} />\n                    </div>\n\n                    {isLoadingIncidents && (\n                        <div className={'menu-loader'}>\n                            <BarLoader size={50} color={'#98ff98'} loading={true} />\n                        </div>\n                    )}\n\n                    {!isLoadingIncidents && !hasIncidents && (\n                        <div className={'menu-summary'}>\n                            Oops. We couldn't find any incidents with location data for this date range\n                        </div>\n                    )}\n\n                    {!isLoadingIncidents && hasIncidents && (\n                        <>\n                            <div className={'menu-section'}>\n                                <div className={'menu-summary'}>{`Showing ${\n                                    visible === total\n                                        ? `${total.toLocaleString(LOCALE)}`\n                                        : `${visible.toLocaleString(LOCALE)} of ${total.toLocaleString(LOCALE)}`\n                                } incidents`}</div>\n                            </div>\n\n                            <div className={'menu-section menu-picker'}>\n                                <IncidentGroupFilter\n                                    incidentsState={incidentsState}\n                                    dispatchIncidentsAction={dispatchIncidentsAction}\n                                />\n                            </div>\n\n                            <div className={'menu-section menu-picker'}>\n                                <DistrictFilter\n                                    incidentsState={incidentsState}\n                                    dispatchIncidentsAction={dispatchIncidentsAction}\n                                />\n                            </div>\n                        </>\n                    )}\n                </div>\n            )}\n\n            <div className={'menu-footer'}>\n                <div className='menu-collapser' onClick={() => setCollapsed(!collapsed)}>\n                    <div className='menu-arrows'>\n                        <ReactSVG src={arrows} />\n                    </div>\n                </div>\n\n                {collapsed && (\n                    <div className={'menu-attribution'}>\n                        <a href='https://www.codeforboston.org/' target='_blank' rel='noopener noreferrer'>\n                            C4B\n                        </a>\n                    </div>\n                )}\n\n                {!collapsed && (\n                    <div className={'menu-attribution'}>\n                        Made with ♥ by{' '}\n                        <a href='https://www.codeforboston.org/' target='_blank' rel='noopener noreferrer'>\n                            Code for Boston\n                        </a>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","import moment from 'moment';\n\nexport function getTimeframeDates({ timeframe, endDate = moment() }) {\n    const { value, unit } = timeframe;\n    return { startDate: moment(endDate).subtract(value, unit), endDate };\n}\n","const BASE_SQL_QUERY_URL = `https://data.boston.gov/api/3/action/datastore_search_sql?sql=`,\n    DATE_FORMAT = 'YYYY-MM-DD hh:mm';\n\n/**\n * Counter used to generate unique ids for incoming incidents. Incremented after each incident is processed.\n * The incoming incidents do have a unique id as well, but this ensures that each id is in fact unique and\n * always available. That's likely true on the backend side as well but this way we didn't have to worry about it\n *\n * @type {number}\n */\nlet counter = 0;\n\n/**\n * Returns an array of incidents\n *\n * @param startDate - moment date\n * @param endDate - moment date\n */\nexport async function getIncidents({ startDate, endDate }) {\n    const sqlQuery = `SELECT * \n        FROM \"12cb3883-56f5-47de-afa5-3b1cf61b257b\" \n        WHERE \"OCCURRED_ON_DATE\" BETWEEN '${startDate.format(DATE_FORMAT)}' AND '${endDate.format(DATE_FORMAT)}'\n    `;\n\n    // Fetch records:\n    const res = await fetch(BASE_SQL_QUERY_URL + sqlQuery),\n        json = await res.json();\n\n    return json.result.records.map(r => {\n        counter += 1;\n        return { ...r, _clientSideId: `_i${counter}` };\n    });\n}\n","import React from 'react';\nimport moment from 'moment';\n\nimport './styles.scss';\nimport { getDistrictName } from '../../utils/districts';\nimport { codeGroupScale, getIncidentGroupName } from '../../utils/codeGroups';\n\n/**\n *\n * @param incident {Incident}\n */\nexport default function IncidentCard({ incident }) {\n    const incidentGroupName = getIncidentGroupName(incident),\n        groupColor = codeGroupScale(incidentGroupName);\n\n    return (\n        <div className={'incident-card'} style={{ borderColor: groupColor }}>\n            <div className={'incident-time'}>{moment(incident.OCCURRED_ON_DATE).format('llll')}</div>\n            <div className='incident-description'>\n                <span className={'incident-group-name'}>{incidentGroupName}</span>\n                <span className={'incident-description-full'}>{incident.OFFENSE_DESCRIPTION}</span>\n            </div>\n            <div className={'incident-location'}>\n                <span className={'incident-district'}>{getDistrictName({ districtCode: incident.DISTRICT })}</span>\n                <span>, </span>\n                <span className={'incident-street'}>{incident.STREET}</span>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport './styles.scss';\nimport IncidentCard from '../IncidentCard';\n\n/**\n *\n * @param incidents {Incident[]}\n */\nexport default function IncidentFeed({ incidents, onIncidentClick }) {\n    if (!incidents || incidents.length === 0) {\n        return null;\n    }\n\n    return (\n        <div className={'incident-feed'}>\n            <h2 className={'incident-feed-title'}>Most Recent Incidents</h2>\n            <div className={'incident-feed-content'}>\n                {incidents.slice(0, 30).map(incident => {\n                    return (\n                        <IncidentCard\n                            key={`incident-card-${incident._clientSideId}`}\n                            incident={incident}\n                            onIncidentClick={onIncidentClick}\n                        />\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport Map from './components/Map';\nimport Menu from './components/Menu';\nimport './styles/global.scss';\nimport { ONE_DAY } from './constants/timeframes';\nimport { getTimeframeDates } from './utils/timeframes';\nimport { getIncidents } from './utils/client';\nimport useIncidentsReducer, { getVisibleIncidents, loadIncidents } from './state/incidents';\nimport { loadIncidentsAndResetFilters } from './state/incidents/actions';\nimport IncidentFeed from './components/IncidentFeed';\nimport { getAllIncidents } from './state/incidents/selectors';\n\n// TODO: End date should be the present but BPD hasn't been updating their data while they work on\n// switching something or other about their systems, so for now we have to work with stale data\nconst END_DATE = moment('2019-09-20');\n\nexport default function App() {\n    const [loading, setLoading] = useState(true),\n        [timeframe, setTimeframe] = useState(ONE_DAY),\n        [dates, setDates] = useState(\n            getTimeframeDates({\n                timeframe,\n                endDate: END_DATE\n            })\n        ),\n        [incidentsState, dispatchIncidentsAction] = useIncidentsReducer();\n\n    useEffect(() => {\n        const { startDate, endDate } = getTimeframeDates({ timeframe, endDate: END_DATE });\n\n        // Update dates in state:\n        setDates({ startDate, endDate });\n\n        // Refresh incidents in map:\n        getIncidents({ startDate, endDate }).then(incidents => {\n            dispatchIncidentsAction(loadIncidentsAndResetFilters(incidents));\n            setLoading(false);\n        });\n\n        // Reset incidents periodically so new ones show up:\n        const intervalId = setInterval(() => {\n            getIncidents({ startDate, endDate }).then(incidents => {\n                dispatchIncidentsAction(loadIncidents(incidents));\n                setLoading(false);\n            });\n        }, 60 * 1000);\n        return () => clearInterval(intervalId);\n    }, [timeframe, dispatchIncidentsAction]);\n\n    return (\n        <div id='app-root'>\n            <Menu\n                timeframe={timeframe}\n                dates={dates}\n                onTimeframeChange={t => {\n                    setLoading(true);\n                    setTimeframe(t);\n                }}\n                isLoadingIncidents={loading}\n                incidentsState={incidentsState}\n                dispatchIncidentsAction={dispatchIncidentsAction}\n            />\n            <Map incidents={getVisibleIncidents(incidentsState)} />\n            <IncidentFeed incidents={getAllIncidents(incidentsState)} />\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/arrows.6820edc8.svg\";","module.exports = __webpack_public_path__ + \"static/media/controls.8fd6a55e.svg\";"],"sourceRoot":""}