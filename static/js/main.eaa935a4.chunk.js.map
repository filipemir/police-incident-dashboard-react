{"version":3,"sources":["utils/codeGroups.js","constants/codeGroups.js","components/Map/index.jsx","constants/timeframes.js","components/TimeframePicker/index.jsx","components/IncidentGroupPicker/index.jsx","components/Menu/index.jsx","utils/client.js","hooks/useIncidentsReducer.js","App.js","serviceWorker.js","index.js","utils/timeframes.js"],"names":["codeGroupScale","scaleOrdinal","schemeSet3","domain","TILE_LAYER_URL","TILE_LAYER_ATTRIBUTION","BOS_LAT_LONG","BOS_LIMITS","getIncidentMarker","incident","latLng","cg","properties","leaflet","icon","className","radius","color","weight","opacity","fillOpacity","bindIncidentPopup","feature","layer","list","Object","keys","filter","p","startsWith","map","replace","bindPopup","IncidentMap","incidents","geojsonData","geojson","parse","Point","Map","center","bounds","TileLayer","url","attribution","GeoJSON","key","Math","random","data","pointToLayer","onEachFeature","ONE_DAY","value","unit","TIMEFRAMES","options","t","label","TimeframePicker","timeframe","endDate","onTimeframeChange","timeframeIndex","findIndex","isEqual","classNamePrefix","onChange","theme","borderRadius","colors","primary","primary75","primary25","neutral0","spacing","menuGutter","controlHeight","format","IncidentGroupPicker","onGroupToggled","incidentsByGroup","visibleGroups","groups","counts","entries","forEach","group","push","name","count","length","sort","a","b","getIncidentGroups","i","type","checked","has","Menu","BASE_SQL_QUERY_URL","DATE_FORMAT","initialState","Set","visibleIncidents","LOAD_INCIDENTS","TOGGLE_INCIDENT_GROUP","getVisibleIncidents","incidentsReducer","state","action","payload","size","delete","add","Error","END_DATE","moment","Boolean","window","location","hostname","match","ReactDOM","render","useState","setTimeframe","dates","setDates","useReducer","incidentsState","dispatchIncidentsAction","useEffect","startDate","subtract","getTimeframeDates","refreshIncidents","async","sqlQuery","fetch","res","json","recordsByGroup","result","records","r","code","parseInt","incidentGroups","console","log","groupName","GROUP","getIncidents","then","intervalId","setInterval","clearInterval","id","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eaa935a4.chunk.js","sourcesContent":["import {scaleOrdinal} from \"d3-scale\";\nimport {schemeSet3} from \"d3-scale-chromatic\";\nimport {CODE_GROUPS} from \"../constants/codeGroups\";\n\n/**\n * Returns a scale to color the offense code groups\n */\nexport const codeGroupScale = scaleOrdinal(schemeSet3).domain(CODE_GROUPS);\n\nexport function filterIncidents({ incidentsByGroup, incidentGroups }) {\n  return Object.values(incidentsByGroup).flatMap(i => i);\n}\n\nexport function getIncidentGroups({ incidentsByGroup }) {\n  const counts = [];\n\n  Object.entries(incidentsByGroup).forEach(([group, incidents]) => {\n    counts.push({ name: group, count: incidents.length })\n  });\n\n  counts.sort((a, b) => {\n    if (a.name === 'Other') return 1;\n    if (b.name === 'Other') return -1;\n    return b.count - a.count;\n  });\n\n  return counts;\n}","export const CODE_GROUPS = [\n  'Firearm Violations',\n  'Confidence Games',\n  'Larceny From Motor Vehicle',\n  'Towed',\n  'Property Related Damage',\n  'Missing Person Located',\n  'Auto Theft Recovery',\n  'INVESTIGATE PERSON',\n  'Harbor Related Incidents',\n  'Service',\n  'Harassment',\n  'Landlord / Tenant Disputes',\n  'Property Found',\n  'HUMAN TRAFFICKING',\n  'Vandalism',\n  'License Violation',\n  'Robbery',\n  'License Plate Related Incidents',\n  'Counterfeiting',\n  'Warrant Arrests',\n  'Disorderly Conduct',\n  'Motor Vehicle Accident Response',\n  'Biological Threat',\n  'Embezzlement',\n  'Ballistics',\n  'Prisoner Related Incidents',\n  'Other Burglary',\n  'Verbal Disputes',\n  'Auto Theft',\n  'Medical Assistance',\n  'Restraining Order Violations',\n  'Manslaughter',\n  'Larceny',\n  'Evading Fare',\n  'Aircraft',\n  'Drug Violation',\n  'Bomb Hoax',\n  'Fire Related Reports',\n  'HUMAN TRAFFICKING - INVOLUNTARY SERVITUDE',\n  'Criminal Harassment',\n  'HOME INVASION',\n  'Search Warrants',\n  'Homicide',\n  'Fraud',\n  'Prostitution',\n  'Explosives',\n  'Residential Burglary',\n  'Operating Under the Influence',\n  'Recovered Stolen Property',\n  'Other',\n  'Liquor Violation',\n  'Commercial Burglary',\n  'Gambling',\n  'Investigate Person',\n  'Aggravated Assault',\n  'Simple Assault',\n  'Property Lost',\n  'Phone Call Complaints',\n  'Missing Person Reported',\n  'Burglary - No Property Taken',\n  'Arson',\n  'Firearm Discovery',\n  'Assembly or Gathering Violations',\n  'Police Service Incidents',\n  'Violations',\n  'Offenses Against Child / Family',\n  'Investigate Property',\n];","import React from 'react';\nimport geojson from  \"geojson\";\nimport * as leaflet from \"leaflet\";\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\n\nimport './styles.scss';\nimport {codeGroupScale} from \"../../utils/codeGroups\";\n\nconst TILE_LAYER_URL = 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',\n    TILE_LAYER_ATTRIBUTION = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    BOS_LAT_LONG = [42.32390487760298, -71.07416152954103],\n    BOS_LIMITS = [[42.39351800, -71.00516847],  [42.24042076, -71.16843346]];\n\nfunction getIncidentMarker(incident, latLng) {\n    const cg = incident.properties['OFFENSE_CODE_GROUP'];\n    if (incident.properties['SHOOTING'] === 'Y') {\n        return leaflet.marker(latLng, {icon: leaflet.divIcon({className: 'incident-marker'})});\n    } else {\n        return leaflet.circleMarker(latLng, {\n            radius: 4,\n            color: codeGroupScale(cg),\n            weight: 1,\n            opacity: 0.5,\n            fillOpacity: 0.25\n        });\n    }\n}\n\nfunction bindIncidentPopup(feature, layer) {\n    const properties = Object.keys(feature.properties).filter(p => !p.startsWith('_'));\n    const list = properties.map(p => `<tr><th>${p.replace(/_/g,' ')}</th><td>${feature.properties[p]}<td></tr>`)\n    layer.bindPopup(`<table><tbody>${list}</tbody></table>`);\n}\n\n/**\n * @returns React component\n * @constructor\n */\nexport default function IncidentMap({ incidents }) {\n    const geojsonData = geojson.parse(incidents, {Point: ['Lat', 'Long']});\n\n    // Commenting out the incident list for now list for performance reasons:\n    return <div className=\"map-root\">\n        {/*<IncidentList incidents={incidents} />*/}\n        <Map center={BOS_LAT_LONG} bounds={BOS_LIMITS}>\n            <TileLayer url={TILE_LAYER_URL} attribution={TILE_LAYER_ATTRIBUTION} />\n            <GeoJSON key={Math.random()} data={geojsonData} pointToLayer={getIncidentMarker} onEachFeature={bindIncidentPopup}/>\n        </Map>\n    </div>;\n}\n\n","export const ONE_HOUR = { value: 1, unit: \"hour\" };\nexport const ONE_DAY = { value: 1, unit: \"day\" };\nexport const SEVEN_DAYS = { value: 7, unit: \"days\" };\nexport const THIRTY_DAYS = { value: 30, unit: \"days\" };\nexport const THREE_MONTHS = { value: 3, unit: \"months\" };\nexport const SIX_MONTHS = { value: 6, unit: \"months\" };\nexport const ONE_YEAR = { value: 1, unit: \"year\" };\n\nexport const TIMEFRAMES = [ONE_HOUR, ONE_DAY, SEVEN_DAYS, THIRTY_DAYS, THREE_MONTHS, SIX_MONTHS, ONE_YEAR];","import React from \"react\";\nimport Select from 'react-select';\nimport isEqual from \"lodash/isEqual\";\n\nimport \"./styles.scss\";\nimport { TIMEFRAMES } from \"../../constants/timeframes\";\n\nconst options = TIMEFRAMES.map(t => {\n  return { value: t, label: `${t.value} ${t.unit}` }\n});\n\nexport default function TimeframePicker({ timeframe, endDate, onTimeframeChange }) {\n  const timeframeIndex = TIMEFRAMES.findIndex(t => isEqual(t, timeframe));\n\n  return <div className={\"timeframe-picker\"}>\n      <Select\n        className={\"timeframe-picker__selector\"}\n        classNamePrefix={\"react-select\"}\n        value={options[timeframeIndex]}\n        onChange={t => onTimeframeChange(t.value)}\n        options={options}\n        theme={theme => ({\n          ...theme,\n          borderRadius: 0,\n          colors: {\n            ...theme.colors,\n            primary: '#fefffe',\n            primary75: '#1086ff',\n            primary25: '#1086ff',\n            neutral0: '#33323c'\n          },\n          spacing: {\n            ...theme.spacing,\n            menuGutter: 0,\n            controlHeight: 30\n          }\n        })}\n      />\n      <div className={\"timeframe-picker__note\"}>Sadly, for now this is actually ending on {`${endDate.format(\"MM-DD-YY\")}`} because the data stopped flowing after that</div>\n    </div>;\n}","import React from \"react\";\n\nimport \"./styles.scss\";\nimport {getIncidentGroups} from \"../../utils/codeGroups\";\n\nexport default function IncidentGroupPicker({  onGroupToggled, incidentsByGroup, visibleGroups }) {\n  const groups = getIncidentGroups({ incidentsByGroup });\n\n  return <div className={\"incident-group-picker\"}>\n      {\n        groups.map((group, i) =>{\n          const { name , count } = group;\n          return <label key={`input-group-${i}`} className={\"group-checkbox\"}>\n            <input type=\"checkbox\" checked={visibleGroups.has(name)} onChange={() => onGroupToggled(name)}/>\n            {name} ({count})\n          </label>;\n        })\n      }\n    </div>;\n}","import React from \"react\";\n\nimport \"./styles.scss\";\nimport TimeframePicker from \"../TimeframePicker\";\nimport IncidentGroupPicker from \"../IncidentGroupPicker\";\n\nexport default function Menu({ timeframe, endDate, onTimeframeChange, onGroupToggled, incidentsByGroup, visibleGroups }) {\n  return <div className={\"menu-root\"}>\n    <div className={\"menu-title\"}>\n      <h1>Boston <br /> Police Incidents</h1>\n    </div>\n    <div className={\"menu-content\"}>\n      <div className={\"menu-section\"}>\n        <h2 className={\"menu-section-title\"}>Date Range</h2>\n        <TimeframePicker endDate={endDate} timeframe={timeframe} onTimeframeChange={onTimeframeChange} />\n      </div>\n      <div className={\"menu-section\"}>\n        <h2 className={\"menu-section-title\"}>Incident Groups</h2>\n        <IncidentGroupPicker incidentsByGroup={incidentsByGroup} visibleGroups={visibleGroups} onGroupToggled={onGroupToggled} />\n      </div>\n    </div>\n  </div>\n}","import incidentGroups from \"../static/incident-groups.json\"\n\nconst BASE_SQL_QUERY_URL = `https://data.boston.gov/api/3/action/datastore_search_sql?sql=`,\n  DATE_FORMAT = 'YYYY-MM-DD hh:mm';\n\n/**\n * Returns an object mapping offense code groups to arrays of incidents\n *\n * @param startDate - moment date\n * @param endDate - moment date\n */\nexport async function getIncidents({ startDate, endDate }) {\n  const sqlQuery = `SELECT * \n        FROM \"12cb3883-56f5-47de-afa5-3b1cf61b257b\" \n        WHERE \"OCCURRED_ON_DATE\" BETWEEN '${startDate.format(DATE_FORMAT)}' AND '${endDate.format(DATE_FORMAT)}'\n    `;\n\n    // Fetch records:\n    const res = await fetch(BASE_SQL_QUERY_URL + sqlQuery),\n      json = await res.json();\n\n    // Group records:\n    const recordsByGroup = {};\n    json.result.records.forEach(r => {\n\n      const code = parseInt(r[\"OFFENSE_CODE\"], 10),\n        group = incidentGroups[code];\n\n      if (!group) {\n        // TODO: Report these somewhere, instead of just logging them\n        console.log(`Incident with unknown group code found: ${group}. Assigning to \"Other\"`);\n        console.log(r);\n      }\n\n      const groupName = group ? group.GROUP : \"Other\";\n\n      !recordsByGroup[groupName] && (recordsByGroup[groupName] = []);\n\n       recordsByGroup[groupName].push(r);\n    });\n\n    return recordsByGroup;\n}\n","import { useReducer } from \"react\";\n\nconst initialState = {\n  incidentsByGroup: {},\n  visibleGroups: new Set(),\n  visibleIncidents: []\n};\n\nexport const LOAD_INCIDENTS = \"load-incidents\";\nexport const TOGGLE_INCIDENT_GROUP = \"toggle-group\";\n\nfunction getVisibleIncidents({ incidentsByGroup, visibleGroups }) {\n  const visibleIncidents = [];\n\n  Object.entries(incidentsByGroup).forEach(([group, incidents]) => {\n    visibleGroups.has(group) && visibleIncidents.push(...incidents) ;\n  });\n\n  return visibleIncidents;\n}\n\nfunction incidentsReducer(state, action) {\n  const { type, payload } = action;\n\n  if (type === LOAD_INCIDENTS) {\n    const { incidentsByGroup } = payload;\n    let { visibleGroups } = state;\n\n    if (state.visibleGroups.size === 0) {\n      visibleGroups = new Set(Object.keys(incidentsByGroup));\n    }\n\n    return {\n      ...state,\n      incidentsByGroup,\n      visibleGroups,\n      visibleIncidents: getVisibleIncidents({ incidentsByGroup, visibleGroups })\n    };\n  }\n\n  if (type === TOGGLE_INCIDENT_GROUP) {\n    const {group} = payload,\n      {incidentsByGroup, visibleGroups} = state;\n\n    visibleGroups.has(group) ? visibleGroups.delete(group) : visibleGroups.add(group);\n\n    return {\n      ...state,\n      visibleGroups,\n      visibleIncidents: getVisibleIncidents({incidentsByGroup, visibleGroups})\n    };\n  }\n\n  throw Error(`Invalid incidents reducer action: ${type}`)\n}\n\nexport default function useIncidentsReducer() {\n  return useReducer(incidentsReducer, initialState);\n}","import React, { useState, useEffect } from 'react';\nimport moment from \"moment\";\n\nimport Map from \"./components/Map\";\nimport Menu from \"./components/Menu\";\nimport './styles/global.scss';\nimport {ONE_DAY} from \"./constants/timeframes\";\nimport {getTimeframeDates} from \"./utils/timeframes\";\nimport {getIncidents} from \"./utils/client\";\nimport useIncidentsReducer, {LOAD_INCIDENTS, TOGGLE_INCIDENT_GROUP} from \"./hooks/useIncidentsReducer\";\n\n// TODO: End date should be the present but BPD hasn't been updating their data while they work on\n// switching something or other about their systems, so for now we have to work with stale data\nconst END_DATE = moment(\"2019-09-20\");\n\nexport default function App() {\n  const [timeframe, setTimeframe] = useState(ONE_DAY),\n    [dates, setDates] = useState({ endDate: END_DATE }),\n    { endDate } = dates,\n    [incidentsState, dispatchIncidentsAction] = useIncidentsReducer(),\n    { incidentsByGroup, visibleGroups, visibleIncidents } = incidentsState;\n\n  useEffect(() => {\n      const { startDate, endDate } = getTimeframeDates({ timeframe, endDate: END_DATE }),\n        refreshIncidents = () => {\n            getIncidents({ startDate, endDate }).then(incidentsByGroup => {\n              dispatchIncidentsAction({ type: LOAD_INCIDENTS, payload: { incidentsByGroup }})\n            });\n        };\n\n      // Update dates in state:\n      setDates({ startDate, endDate });\n\n      // Refresh incidents in map:\n      refreshIncidents();\n\n      // Reset incidents periodically so new ones show up:\n      const intervalId = setInterval(refreshIncidents, 60 * 1000);\n      return () => clearInterval(intervalId);\n  }, [timeframe, dispatchIncidentsAction]);\n\n  return <div id=\"app-root\">\n      <Menu incidentsByGroup={incidentsByGroup} visibleGroups={visibleGroups} timeframe={timeframe} endDate={endDate} onTimeframeChange={setTimeframe}\n                onGroupToggled={group => dispatchIncidentsAction({ type: TOGGLE_INCIDENT_GROUP, payload: { group } }) }/>\n      <Map incidents={visibleIncidents} />\n  </div>;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import moment from \"moment\";\n\nexport function getTimeframeDates({ timeframe, endDate = moment() }) {\n  const { value, unit } = timeframe;\n  return { startDate: moment(endDate).subtract(value, unit), endDate };\n}"],"sourceRoot":""}