{"version":3,"sources":["utils/codeGroups.js","components/Map/index.jsx","constants/timeframes.js","components/TimeframePicker/index.jsx","state/incidents/actions.js","utils/incidents.js","state/incidents/reducer.js","state/incidents/selectors.js","state/incidents/index.js","components/FilterGroup/index.jsx","constants/locale.js","components/IncidentGroupFilter/index.jsx","constants/districts.js","utils/districts.js","components/DistrictFilter/index.jsx","components/Menu/index.jsx","utils/timeframes.js","utils/client.js","components/IncidentCard/index.jsx","components/IncidentFeed/index.jsx","App.js","serviceWorker.js","index.js","images/arrows.svg","images/controls.svg"],"names":["incidentGroupNames","Set","Object","values","INCIDENT_GROUPS","forEach","GROUP","add","codeGroupScale","scaleOrdinal","schemeSet3","domain","getIncidentGroupName","incident","code","parseInt","OFFENSE_CODE","group","TILE_LAYER_URL","TILE_LAYER_ATTRIBUTION","BOS_LAT_LONG","BOS_LIMITS","getIncidentMarker","latLng","cg","properties","leaflet","radius","color","weight","opacity","fillOpacity","bindIncidentPopup","feature","layer","list","keys","filter","p","startsWith","map","replace","bindPopup","IncidentMap","incidents","geojsonData","geojson","parse","Point","className","Map","center","bounds","TileLayer","url","attribution","GeoJSON","key","Math","random","data","pointToLayer","onEachFeature","SEVEN_DAYS","value","unit","TIMEFRAMES","options","t","label","TimeframePicker","timeframe","onTimeframeChange","timeframeIndex","findIndex","isEqual","classNamePrefix","onChange","theme","borderRadius","colors","primary","primary75","primary25","neutral0","spacing","menuGutter","controlHeight","LOAD_INCIDENTS","LOAD_INCIDENTS_AND_RESET_FILTERS","TOGGLE_INCIDENT_GROUP","TOGGLE_DISTRICT","HIDE_ALL_GROUPS","HIDE_ALL_DISTRICTS","SHOW_ALL_GROUPS","SHOW_ALL_DISTRICTS","RESET_FILTERS","toggleIncidentGroup","type","payload","toggleDistrict","district","hideAllIncidentGroups","hideAllDistricts","sortIncidentsByDescendingDate","sort","a","b","dateA","moment","OCCURRED_ON_DATE","dateB","isValid","diff","INITIAL_STATE","sortedByDate","visibleIds","hiddenIds","counts","total","totalVisible","perGroup","perDistrict","filters","visibleGroups","groupsChanged","visibleDistricts","districtsChanged","incidentIsVisible","has","DISTRICT","reduceLoadIncidents","state","groupsPreviouslyFiltered","districtsPreviouslyFiltered","filteredIncidents","nullsCount","zerosCount","result","Lat","Long","lat","long","console","log","filterIncidents","OFFENSE_DESCRIPTION","isEmpty","reportUnknownCodeGroups","groupName","_clientSideId","reduceNewFilters","newFilters","newVisibleIds","newHiddenIds","newVisibleTotal","reduceResetFilters","incidentsReducer","action","delete","reduceToggleFilter","reduceShowAllIncidentGroups","reduceShowAllDistricts","reduceHideAllIncidentGroups","reduceHideAllDistricts","Error","getVisibleIncidents","id","push","useIncidentsReducer","useReducer","FilterGroup","title","summary","children","onSelectAll","onUnselectAll","useState","expanded","setExpanded","onClick","src","arrows","LOCALE","IncidentGroupFilter","incidentsState","dispatchIncidentsAction","groups","getSortedIncidentGroups","groupsCount","length","toLocaleString","visibleGroupsCount","size","i","count","getIncidentCountInGroup","isVisible","onDoubleClick","style","backgroundColor","hexToRgba","borderColor","A1","name","A7","A15","B2","B3","C6","C11","D4","D14","E5","E13","E18","getDistrictName","districtInfo","districtCode","DISTRICTS","toUpperCase","getDistrictInfo","DistrictFilter","districts","getSortedDistricts","d","districtCount","visibleDistrictCount","getIncidentCountInDistrict","districtName","Menu","dates","isLoadingIncidents","startDate","endDate","visible","getVisibleIncidentCount","hasIncidents","collapsed","setCollapsed","controls","format","year","loading","href","target","rel","getTimeframeDates","subtract","BASE_SQL_QUERY_URL","DATE_FORMAT","counter","getIncidents","async","sqlQuery","fetch","res","json","records","r","IncidentCard","incidentGroupName","groupColor","STREET","INCREMENT","IncidentFeed","onIncidentClick","feedIncidents","setFeedIncidents","index","setIndex","useEffect","slice","incidentComponents","pageStart","loadMore","page","hasMore","loader","useWindow","END_DATE","Boolean","window","location","hostname","match","ReactDOM","render","setLoading","setTimeframe","setDates","then","loadIncidentsAndResetFilters","intervalId","setInterval","loadIncidents","clearInterval","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1adbe4e3.chunk.js","sourcesContent":["import { scaleOrdinal } from 'd3-scale';\nimport { schemeSet3 } from 'd3-scale-chromatic';\nimport isEmpty from 'lodash/isEmpty';\nimport INCIDENT_GROUPS from '../constants/incident-groups';\n\nconst incidentGroupNames = new Set();\n\nObject.values(INCIDENT_GROUPS).forEach(({ GROUP }) => {\n    incidentGroupNames.add(GROUP);\n});\n\n/**\n * Returns a scale to color the offense code groups\n */\nexport const codeGroupScale = scaleOrdinal(schemeSet3).domain(incidentGroupNames);\n\n/**\n * Gets the incident group name matching the provided incident's offense code\n * @param incident [Incident]\n * @returns {string} - Group name\n */\nexport function getIncidentGroupName(incident) {\n    const code = parseInt(incident.OFFENSE_CODE, 10),\n        group = INCIDENT_GROUPS[code];\n\n    return group ? group.GROUP : 'Other';\n}\n\nexport function reportUnknownCodeGroups(incidents) {\n    const result = {};\n\n    incidents.forEach(incident => {\n        const code = parseInt(incident.OFFENSE_CODE, 10),\n            group = INCIDENT_GROUPS[code];\n\n        if (!group) {\n            !result[incident.OFFENSE_CODE] && (result[incident.OFFENSE_CODE] = new Set());\n            result[incident.OFFENSE_CODE].add(incident.OFFENSE_DESCRIPTION);\n        }\n    });\n\n    if (!isEmpty(result)) {\n        console.log('Unknown code groups found:');\n        console.log(result);\n    }\n}\n","import React from 'react';\nimport geojson from 'geojson';\nimport * as leaflet from 'leaflet';\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet';\n\nimport './styles.scss';\nimport { codeGroupScale, getIncidentGroupName } from '../../utils/codeGroups';\n\nconst TILE_LAYER_URL = 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',\n    TILE_LAYER_ATTRIBUTION =\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    BOS_LAT_LONG = [42.32390487760298, -71.07416152954103],\n    BOS_LIMITS = [\n        [42.393518, -71.00516847],\n        [42.24042076, -71.16843346]\n    ];\n\nfunction getIncidentMarker(incident, latLng) {\n    const cg = getIncidentGroupName(incident.properties);\n    return leaflet.circleMarker(latLng, {\n        radius: 4,\n        color: codeGroupScale(cg),\n        weight: 1,\n        opacity: 0.5,\n        fillOpacity: 0.25\n    });\n}\n\nfunction bindIncidentPopup(feature, layer) {\n    const properties = Object.keys(feature.properties).filter(p => !p.startsWith('_'));\n    const list = properties.map(p => `<tr><th>${p.replace(/_/g, ' ')}</th><td>${feature.properties[p]}<td></tr>`);\n    layer.bindPopup(`<table><tbody>${list}</tbody></table>`);\n}\n\n/**\n * @returns React component\n * @constructor\n */\nexport default function IncidentMap({ incidents }) {\n    const geojsonData = geojson.parse(incidents, { Point: ['Lat', 'Long'] });\n\n    return (\n        <div className='map-root'>\n            <Map center={BOS_LAT_LONG} bounds={BOS_LIMITS}>\n                <TileLayer url={TILE_LAYER_URL} attribution={TILE_LAYER_ATTRIBUTION} />\n                <GeoJSON\n                    key={Math.random()}\n                    data={geojsonData}\n                    pointToLayer={getIncidentMarker}\n                    onEachFeature={bindIncidentPopup}\n                />\n            </Map>\n        </div>\n    );\n}\n","// export const ONE_HOUR = { value: 1, unit: 'hour' };\nexport const ONE_DAY = { value: 1, unit: 'day' };\nexport const SEVEN_DAYS = { value: 7, unit: 'days' };\nexport const THIRTY_DAYS = { value: 30, unit: 'days' };\n// export const THREE_MONTHS = { value: 3, unit: 'months' };\n// export const SIX_MONTHS = { value: 6, unit: 'months' };\n// export const ONE_YEAR = { value: 1, unit: 'year' };\n\nexport const TIMEFRAMES = [ONE_DAY, SEVEN_DAYS, THIRTY_DAYS];\n","import React from 'react';\nimport Select from 'react-select';\nimport isEqual from 'lodash/isEqual';\n\nimport './styles.scss';\nimport { TIMEFRAMES } from '../../constants/timeframes';\n\nconst options = TIMEFRAMES.map(t => {\n    return { value: t, label: `${t.value} ${t.unit}` };\n});\n\nexport default function TimeframePicker({ timeframe, onTimeframeChange }) {\n    const timeframeIndex = TIMEFRAMES.findIndex(t => isEqual(t, timeframe));\n\n    return (\n        <div className={'timeframe-picker'}>\n            <Select\n                className={'timeframe-picker__selector'}\n                classNamePrefix={'react-select'}\n                value={options[timeframeIndex]}\n                onChange={t => onTimeframeChange(t.value)}\n                options={options}\n                theme={theme => ({\n                    ...theme,\n                    borderRadius: 0,\n                    colors: {\n                        ...theme.colors,\n                        primary: '#fefffe',\n                        primary75: '#1086ff',\n                        primary25: '#1086ff',\n                        neutral0: '#33323c'\n                    },\n                    spacing: {\n                        ...theme.spacing,\n                        menuGutter: 0,\n                        controlHeight: 30\n                    }\n                })}\n            />\n        </div>\n    );\n}\n","/**\n *\n * @type {string}\n */\nexport const LOAD_INCIDENTS = 'load-incidents';\nexport const LOAD_INCIDENTS_AND_RESET_FILTERS = 'load-incidents-and-reset-filters';\nexport const TOGGLE_INCIDENT_GROUP = 'toggle-group';\nexport const TOGGLE_DISTRICT = 'toggle-district';\nexport const HIDE_ALL_GROUPS = 'hide-all-groups';\nexport const HIDE_ALL_DISTRICTS = 'hide-all-districts';\nexport const SHOW_ALL_GROUPS = 'show-all-groups';\nexport const SHOW_ALL_DISTRICTS = 'show-all-districts';\nexport const RESET_FILTERS = 'reset-filters';\n\n/**\n * @param {Incident[]} incidents\n * @returns {IncidentsAction<{ incidents: Incident[] }>}\n */\nexport function loadIncidents(incidents) {\n    return { type: LOAD_INCIDENTS, payload: { incidents } };\n}\n\n/**\n * @param {Incident[]} incidents\n * @returns {IncidentsAction<{ incidents: Incident[] }>}\n */\nexport function loadIncidentsAndResetFilters(incidents) {\n    return { type: LOAD_INCIDENTS_AND_RESET_FILTERS, payload: { incidents } };\n}\n\n/**\n * @param {string} group\n * @returns {IncidentsAction<{ group: string }>}\n */\nexport function toggleIncidentGroup(group) {\n    return { type: TOGGLE_INCIDENT_GROUP, payload: { group } };\n}\n\n/**\n * @param {string} district\n * @returns {IncidentsAction<{ district: string }>}\n */\nexport function toggleDistrict(district) {\n    return { type: TOGGLE_DISTRICT, payload: { district } };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function showAllIncidentGroups() {\n    return { type: SHOW_ALL_GROUPS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function showAllDistricts() {\n    return { type: SHOW_ALL_DISTRICTS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function hideAllIncidentGroups() {\n    return { type: HIDE_ALL_GROUPS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function hideAllDistricts() {\n    return { type: HIDE_ALL_DISTRICTS };\n}\n\n/**\n * @returns {IncidentsAction<>}\n */\nexport function resetFilters() {\n    return { type: RESET_FILTERS };\n}\n","import moment from 'moment';\n\n/**\n *\n * @param incidents {Incident[]}\n * @returns {Incident[]}\n */\nexport function sortIncidentsByDescendingDate(incidents) {\n    return incidents.sort((a, b) => {\n        const dateA = moment(a.OCCURRED_ON_DATE),\n            dateB = moment(b.OCCURRED_ON_DATE);\n        return dateA.isValid() && dateB.isValid() ? dateB.diff(dateA) : -1;\n    });\n}\n\nexport function filterIncidents(incidents) {\n    let nullsCount = 0,\n        zerosCount = 0;\n\n    const result = incidents.filter(incident => {\n        if (!incident.Lat || !incident.Long) {\n            nullsCount += 1;\n            return false;\n        }\n\n        const lat = parseInt(incident.Lat, 10),\n            long = parseInt(incident.Long, 10);\n\n        if (lat === 0 || long === 0) {\n            zerosCount += 1;\n            return false;\n        }\n\n        return true;\n    });\n\n    nullsCount && console.log(`Omitting ${nullsCount} incidents with null lat/longs`);\n    zerosCount && console.log(`Omitting ${zerosCount} incidents with 0s for lat/longs`);\n\n    return result;\n}\n","import { useReducer } from 'react';\n\nimport {\n    HIDE_ALL_DISTRICTS,\n    HIDE_ALL_GROUPS,\n    LOAD_INCIDENTS,\n    LOAD_INCIDENTS_AND_RESET_FILTERS,\n    RESET_FILTERS,\n    SHOW_ALL_DISTRICTS,\n    SHOW_ALL_GROUPS,\n    TOGGLE_DISTRICT,\n    TOGGLE_INCIDENT_GROUP\n} from './actions';\nimport { getIncidentGroupName, reportUnknownCodeGroups } from '../../utils/codeGroups';\nimport { filterIncidents, sortIncidentsByDescendingDate } from '../../utils/incidents';\n\nconst INITIAL_STATE = {\n    incidents: {\n        map: {},\n        sortedByDate: [],\n        visibleIds: new Set(),\n        hiddenIds: new Set()\n    },\n    counts: {\n        total: 0,\n        totalVisible: 0,\n        perGroup: {},\n        perDistrict: {}\n    },\n    filters: {\n        visibleGroups: new Set(),\n        groupsChanged: false,\n        visibleDistricts: new Set(),\n        districtsChanged: false\n    }\n};\n\n/**\n * Determine whether the incident should be visible according to the provided filters\n *\n * @param incident {Incident}\n * @param filters {IncidentsFilters}\n * @returns {boolean}\n */\nfunction incidentIsVisible({ incident, filters }) {\n    const { visibleGroups, visibleDistricts } = filters;\n    return visibleGroups.has(getIncidentGroupName(incident)) && visibleDistricts.has(incident.DISTRICT);\n}\n\n/**\n * Resets state (including filters and counts) with a new set of incidents\n *\n * @param state {IncidentsState}\n * @param payload {{ incidents: Incident[] }}\n * @returns {IncidentsState}\n */\nfunction reduceLoadIncidents(state, { incidents }) {\n    const visibleIds = new Set(),\n        groupsPreviouslyFiltered = state.filters.groupsChanged,\n        districtsPreviouslyFiltered = state.filters.districtsChanged,\n        visibleGroups = groupsPreviouslyFiltered ? state.filters.visibleGroups : new Set(),\n        visibleDistricts = districtsPreviouslyFiltered ? state.filters.visibleDistricts : new Set(),\n        map = {},\n        perGroup = {},\n        perDistrict = {},\n        filteredIncidents = filterIncidents(incidents);\n\n    let total = 0,\n        totalVisible = 0;\n\n    reportUnknownCodeGroups(filteredIncidents);\n\n    // First reset filters and counts:\n    filteredIncidents.forEach(incident => {\n        const groupName = getIncidentGroupName(incident),\n            district = incident.DISTRICT;\n\n        map[incident._clientSideId] = incident;\n        total += 1;\n\n        !perGroup[groupName] && (perGroup[groupName] = 0);\n        perGroup[groupName] += 1;\n        !groupsPreviouslyFiltered && visibleGroups.add(groupName);\n\n        !perDistrict[district] && (perDistrict[district] = 0);\n        perDistrict[district] += 1;\n        !districtsPreviouslyFiltered && visibleDistricts.add(district);\n    });\n\n    // Then reset visible ids and totals:\n    filteredIncidents.forEach(incident => {\n        if (incidentIsVisible({ incident, filters: { visibleDistricts, visibleGroups } })) {\n            visibleIds.add(incident._clientSideId);\n            totalVisible += 1;\n        }\n    });\n\n    return {\n        incidents: {\n            map,\n            hiddenIds: new Set(),\n            visibleIds,\n            sortedByDate: sortIncidentsByDescendingDate(filteredIncidents)\n        },\n        counts: { total, totalVisible, perGroup, perDistrict },\n        filters: { visibleGroups, visibleDistricts }\n    };\n}\n\n/**\n * Reduces the provided state in accordance with the provided filters\n *\n * @param state {IncidentsState}\n * @param newFilters {IncidentsFilters}\n */\nfunction reduceNewFilters(state, newFilters) {\n    const { incidents, counts } = state,\n        newVisibleIds = new Set(),\n        newHiddenIds = new Set();\n    let newVisibleTotal = 0;\n\n    Object.values(incidents.map).forEach(incident => {\n        const isVisible = incidentIsVisible({ incident, filters: newFilters });\n\n        if (isVisible) {\n            newVisibleIds.add(incident._clientSideId);\n            newVisibleTotal += 1;\n        } else {\n            newHiddenIds.add(incident._clientSideId);\n        }\n    });\n\n    return {\n        ...state,\n        incidents: { ...incidents, visibleIds: newVisibleIds, hiddenIds: newHiddenIds },\n        counts: { ...counts, totalVisible: newVisibleTotal },\n        filters: newFilters\n    };\n}\n\n/**\n * Toggle a specific filter item\n *\n * @param state {IncidentsState}\n * @param payload {{ [group]: string, [filter]: string }}\n * @returns {IncidentsState}\n */\nfunction reduceToggleFilter(state, { group, district }) {\n    const newFilters = { ...state.filters };\n\n    if (group) {\n        newFilters.groupsChanged = true;\n\n        if (newFilters.visibleGroups.has(group)) {\n            newFilters.visibleGroups.delete(group);\n        } else {\n            newFilters.visibleGroups.add(group);\n        }\n    }\n\n    if (district) {\n        newFilters.districtsChanged = true;\n\n        if (newFilters.visibleDistricts.has(district)) {\n            newFilters.visibleDistricts.delete(district);\n        } else {\n            newFilters.visibleDistricts.add(district);\n        }\n    }\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceShowAllIncidentGroups(state) {\n    const { filters, counts } = state,\n        newFilters = { ...filters, visibleGroups: new Set(Object.keys(counts.perGroup)), groupsChanged: true };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceShowAllDistricts(state) {\n    const { filters, counts } = state,\n        newFilters = { ...filters, visibleDistricts: new Set(Object.keys(counts.perDistrict)), districtsChanged: true };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceHideAllIncidentGroups(state) {\n    const { filters } = state,\n        newFilters = { ...filters, visibleGroups: new Set(), groupsChanged: true };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceHideAllDistricts(state) {\n    const { filters } = state,\n        newFilters = { ...filters, visibleDistricts: new Set(), districtsChanged: true };\n\n    return reduceNewFilters(state, newFilters);\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {IncidentsState}\n */\nfunction reduceResetFilters(state) {\n    return {\n        ...state,\n        filters: {\n            visibleGroups: new Set(Object.keys(state.counts.perGroup)),\n            groupsChanged: false,\n            visibleDistricts: new Set(Object.keys(state.counts.perDistrict)),\n            districtsChanged: false\n        }\n    };\n}\n\n/**\n * @param state {IncidentsState}\n * @param action {IncidentsAction}\n * @returns {IncidentsState}\n */\nfunction incidentsReducer(state, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case LOAD_INCIDENTS:\n            return reduceLoadIncidents(state, payload);\n        case LOAD_INCIDENTS_AND_RESET_FILTERS:\n            return reduceLoadIncidents(reduceResetFilters(state), payload);\n        case TOGGLE_INCIDENT_GROUP:\n        case TOGGLE_DISTRICT:\n            return reduceToggleFilter(state, payload);\n        case SHOW_ALL_GROUPS:\n            return reduceShowAllIncidentGroups(state);\n        case SHOW_ALL_DISTRICTS:\n            return reduceShowAllDistricts(state);\n        case HIDE_ALL_GROUPS:\n            return reduceHideAllIncidentGroups(state);\n        case HIDE_ALL_DISTRICTS:\n            return reduceHideAllDistricts(state);\n        case RESET_FILTERS:\n            return reduceResetFilters(state);\n        default:\n            throw Error(`Invalid incidents reducer action: ${type}`);\n    }\n}\n\nexport default function useIncidentsReducer() {\n    return useReducer(incidentsReducer, INITIAL_STATE);\n}\n","/**\n * @param state {IncidentsState}\n * @returns {number}\n */\nexport function getTotalIncidentCount(state) {\n    return state.counts.total;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {number}\n */\nexport function getVisibleIncidentCount(state) {\n    return state.counts.totalVisible;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Incident[]}\n */\nexport function getAllIncidents(state) {\n    return state.incidents.sortedByDate;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Incident[]}\n */\nexport function getVisibleIncidents(state) {\n    const { visibleIds, map } = state.incidents,\n        result = [];\n\n    visibleIds.forEach(id => {\n        result.push(map[id]);\n    });\n\n    return result;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Set<string>}\n */\nexport function getVisibleIncidentGroups(state) {\n    return state.filters.visibleGroups;\n}\n\n/**\n * @param state {IncidentsState}\n * @returns {Set<string>}\n */\nexport function getVisibleDistricts(state) {\n    return state.filters.visibleDistricts;\n}\n\n/**\n * @param state {IncidentsState}\n * @param {object}\n *  @param group {string}\n * @returns {number}\n */\nexport function getIncidentCountInGroup(state, { group }) {\n    return state.counts.perGroup[group];\n}\n\n/**\n * @param state {IncidentsState}\n * @param {object}\n *  @param district {string}\n * @returns {number}\n */\nexport function getIncidentCountInDistrict(state, { district }) {\n    return state.counts.perDistrict[district];\n}\n\n/**\n * Returns an array of group names sorted in descending order by their incident\n * count (except for 'Other' which goes to the bottom regardless)\n *\n * @param state {IncidentsState}\n * @returns {string[]}\n */\nexport function getSortedIncidentGroups(state) {\n    const { perGroup } = state.counts,\n        result = Object.keys(perGroup);\n\n    result.sort((a, b) => {\n        if (a === 'Other') return 1;\n        if (b === 'Other') return -1;\n        return perGroup[b] - perGroup[a];\n    });\n\n    return result;\n}\n\n/**\n * Returns an array of districts sorted in descending order by their incident\n * count\n *\n * @param state {IncidentsState}\n * @returns {string[]}\n */\nexport function getSortedDistricts(state) {\n    const { perDistrict } = state.counts,\n        result = Object.keys(perDistrict);\n\n    result.sort((a, b) => {\n        return perDistrict[b] - perDistrict[a];\n    });\n\n    return result;\n}\n","import useIncidentsReducer from './reducer';\nimport {\n    loadIncidents,\n    hideAllIncidentGroups,\n    showAllIncidentGroups,\n    toggleIncidentGroup,\n    toggleDistrict\n} from './actions';\nimport {\n    getVisibleIncidents,\n    getVisibleIncidentGroups,\n    getVisibleDistricts,\n    getTotalIncidentCount,\n    getVisibleIncidentCount,\n    getIncidentCountInDistrict,\n    getIncidentCountInGroup,\n    getSortedDistricts,\n    getSortedIncidentGroups\n} from './selectors';\n\n/**\n * @typedef Incident\n * @type {object}\n * @property {string} _clientSideId - client side unique generated id, e.g. \"_i7645\"\n * @property {string} INCIDENT_NUMBER - Unique server-side id, e.g \"I192075552\"\n * @property {string} STREET - e.g \"DUDLEY ST\"\n * @property {string} OFFENSE_DESCRIPTION - e.g \"WARRANT ARREST\"\n * @property {string} SHOOTING\n * @property {string} DISTRICT - e.g \"B2\"\n * @property {string} OFFENSE_CODE - e.g \"03125\"\n * @property {string} REPORTING_AREA\n * @property {string} OCCURRED_ON_DATE - e.g \"2019-09-19 19:08:00\"\n * @property {string} DAY_OF_WEEK - e.g \"Thursday\"\n * @property {string} MONTH - e.g \"9\"\n * @property {string} HOUR - e.g \"19\"\n * @property {string} YEAR - e.g \"2019\"\n * @property {string} Long - e.g \"42.38572465\"\n * @property {string} Lat - e.g \"-71.00661702\"\n * @property {string} OFFENSE_CODE_GROUP - e.g \"Warrant Arrests\"\n * @property {string} UCR_PART - e.g \"Part Three\"\n * @property {string} Location - Lat/long e.g \"(42.38572465, -71.00661702)\"\n */\n\n/**\n * @typedef IncidentsAction\n * @type {object}\n * @property {string} type\n * @property {object<*>} [payload]\n */\n\n/**\n * @typedef IncidentsFilters\n * @type {object}\n * @property {Set<string>} visibleGroups - Set of incident group names currently visible\n * @property {Set<string>} visibleDistricts - Set of districts currently visible\n */\n\n/**\n * @typedef IncidentsState\n * @type {object}\n * @property {object} incidents\n *  @property {Incident[]} sortedByDate - Array of incidents sorted by descending date\n *  @property {{ [string]: Incident }} map - Map of unique ids to incidents\n *  @property {Set<string>} visibleIds - Ids of incidents to display, i.e those not currently filtered out\n *  @property {Set<string>} hiddenIds - Ids of incidents to hide, i.e those currently filtered out\n * @property {object} counts\n *  @property {number} total\n *  @property {number} totalVisible\n *  @property {{ [string]: number }} perGroup - Map of all incident group names to incident counts\n *  @property {boolean} groupsChanged - Has the user changed the group filter from the default set\n *  @property {{ [string]: number }} perDistrict - Map of all districts to incident counts\n *  @property {boolean} districtsChanged - Has the user changed the districts filter from the default set\n * @property {IncidentsFilters} filters\n */\n\n// Actions creators:\nexport { loadIncidents, hideAllIncidentGroups, showAllIncidentGroups, toggleIncidentGroup, toggleDistrict };\n\n// Selectors:\nexport {\n    getVisibleIncidents,\n    getVisibleIncidentGroups,\n    getVisibleDistricts,\n    getTotalIncidentCount,\n    getVisibleIncidentCount,\n    getIncidentCountInDistrict,\n    getIncidentCountInGroup,\n    getSortedIncidentGroups,\n    getSortedDistricts\n};\n\n// Reducer:\nexport default useIncidentsReducer;\n","import React, { useState } from 'react';\n\nimport './styles.scss';\nimport { ReactSVG } from 'react-svg';\nimport arrows from '../../images/arrows.svg';\n\nexport default function FilterGroup({ title, summary, children, onSelectAll, onUnselectAll }) {\n    const [expanded, setExpanded] = useState(false);\n\n    return (\n        <div className={`filterer ${expanded ? 'filterer__expanded' : ''}`}>\n            <div className={'filterer-header'} onClick={() => setExpanded(!expanded)}>\n                <span className={'filterer-title'}>{title}</span>\n                <div className={`filterer-header-arrows ${expanded ? 'filterer-header-arrows__point-up' : ''}`}>\n                    <ReactSVG src={arrows} />\n                </div>\n            </div>\n            {!expanded && summary && (\n                <div className={'filterer-summary'} onClick={() => setExpanded(!expanded)}>\n                    {summary}\n                </div>\n            )}\n            {expanded && (\n                <>\n                    <div className={'filterer-items'}>{children}</div>\n                    <div className={'filterer-controls'}>\n                        <div className={'filterer-bulk-actions'}>\n                            <div className={'filterer-bulk-action'} onClick={onSelectAll}>\n                                <span>Select All</span>\n                            </div>\n                            <div className={'filterer-bulk-action'} onClick={onUnselectAll}>\n                                <span>Unselect All</span>\n                            </div>\n                        </div>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n","export const LOCALE = 'en-US';\n","import React from 'react';\nimport hexToRgba from 'hex-to-rgba';\n\nimport './styles.scss';\nimport { codeGroupScale } from '../../utils/codeGroups';\nimport {\n    hideAllIncidentGroups,\n    showAllIncidentGroups,\n    toggleIncidentGroup,\n    getIncidentCountInGroup,\n    getSortedIncidentGroups,\n    getVisibleIncidentGroups\n} from '../../state/incidents';\nimport FilterGroup from '../FilterGroup';\nimport { LOCALE } from '../../constants/locale';\n\nexport default function IncidentGroupFilter({ incidentsState, dispatchIncidentsAction }) {\n    let groups = getSortedIncidentGroups(incidentsState),\n        visibleGroups = getVisibleIncidentGroups(incidentsState),\n        groupsCount = groups.length.toLocaleString(LOCALE),\n        visibleGroupsCount = visibleGroups.size.toLocaleString(LOCALE);\n\n    return (\n        <div className={'incident-group-filter'}>\n            <FilterGroup\n                title={'Incident Groups'}\n                summary={\n                    visibleGroups.size === groups.length\n                        ? `Showing all ${groupsCount} incident groups`\n                        : `Showing ${visibleGroupsCount} of ${groupsCount} incident groups`\n                }\n                onSelectAll={() => dispatchIncidentsAction(showAllIncidentGroups())}\n                onUnselectAll={() => dispatchIncidentsAction(hideAllIncidentGroups())}\n            >\n                {groups.map((group, i) => {\n                    const count = getIncidentCountInGroup(incidentsState, { group }).toLocaleString(LOCALE),\n                        isVisible = visibleGroups.has(group),\n                        color = codeGroupScale(group);\n\n                    return (\n                        <div\n                            key={`input-group-${i}`}\n                            className={`incident-group ${isVisible ? '' : 'inactive'}`}\n                            onClick={() => dispatchIncidentsAction(toggleIncidentGroup(group))}\n                            onDoubleClick={() => {\n                                dispatchIncidentsAction(hideAllIncidentGroups());\n                                dispatchIncidentsAction(toggleIncidentGroup(group));\n                            }}\n                        >\n                            <div\n                                className={`incident-group__dot`}\n                                style={{\n                                    backgroundColor: isVisible ? hexToRgba(color, 0.5) : null,\n                                    borderColor: isVisible ? hexToRgba(color, 1) : '#d3d3d3'\n                                }}\n                            />\n                            <span className={'incident-group__name'}>{group}</span>\n                            <span className={'incident-group__count'}>{count}</span>\n                        </div>\n                    );\n                })}\n            </FilterGroup>\n        </div>\n    );\n}\n","export default {\n    A1: {\n        name: 'Downtown'\n    },\n    A7: {\n        name: 'East Boston'\n    },\n    A15: {\n        name: 'Charlestown'\n    },\n    B2: {\n        name: 'Roxbury'\n    },\n    B3: {\n        name: 'Mattapan'\n    },\n    C6: {\n        name: 'South Boston'\n    },\n    C11: {\n        name: 'Dorchester'\n    },\n    D4: {\n        name: 'South End'\n    },\n    D14: {\n        name: 'Brighton'\n    },\n    E5: {\n        name: 'West Roxbury'\n    },\n    E13: {\n        name: 'Jamaica Plain'\n    },\n    E18: {\n        name: 'Hyde Park'\n    }\n};\n","import isEmpty from 'lodash/isEmpty';\nimport DISTRICTS from '../constants/districts';\n\n/**\n * @param {object}\n *  @property districtCode {string} - e.g \"B2\"\n * @returns {string|undefined}\n */\nexport function getDistrictName({ districtCode }) {\n    const districtInfo = getDistrictInfo({ districtCode });\n\n    return districtInfo && districtInfo.name;\n}\n\nexport function getDistrictInfo({ districtCode }) {\n    if (isEmpty(districtCode)) {\n        return;\n    }\n\n    return DISTRICTS[districtCode.toUpperCase()];\n}\n","import React from 'react';\n\nimport './styles.scss';\nimport {\n    getIncidentCountInDistrict,\n    getSortedDistricts,\n    getVisibleDistricts,\n    toggleDistrict\n} from '../../state/incidents';\nimport FilterGroup from '../FilterGroup';\nimport { hideAllDistricts, showAllDistricts } from '../../state/incidents/actions';\nimport { getDistrictName } from '../../utils/districts';\nimport { LOCALE } from '../../constants/locale';\n\nexport default function DistrictFilter({ incidentsState, dispatchIncidentsAction }) {\n    let districts = getSortedDistricts(incidentsState).filter(d => !!d),\n        visibleDistricts = getVisibleDistricts(incidentsState),\n        districtCount = districts.length.toLocaleString(LOCALE),\n        visibleDistrictCount = visibleDistricts.size.toLocaleString(LOCALE);\n\n    return (\n        <div className={'district-filter'}>\n            <FilterGroup\n                title={'Districts'}\n                summary={\n                    visibleDistricts.size === districts.length\n                        ? `Showing all ${districtCount} districts`\n                        : `Showing ${visibleDistrictCount} of ${districtCount} districts`\n                }\n                onSelectAll={() => dispatchIncidentsAction(showAllDistricts())}\n                onUnselectAll={() => dispatchIncidentsAction(hideAllDistricts())}\n            >\n                {districts.map((district, i) => {\n                    const count = getIncidentCountInDistrict(incidentsState, { district }).toLocaleString(LOCALE),\n                        isVisible = visibleDistricts.has(district),\n                        districtName = getDistrictName({ districtCode: district });\n\n                    if (!districtName) {\n                        return null;\n                    }\n\n                    return (\n                        <div\n                            key={`district-${i}`}\n                            className={`district ${isVisible ? '' : 'inactive'}`}\n                            onClick={() => dispatchIncidentsAction(toggleDistrict(district))}\n                            onDoubleClick={() => {\n                                dispatchIncidentsAction(hideAllDistricts());\n                                dispatchIncidentsAction(toggleDistrict(district));\n                            }}\n                        >\n                            <div className={`district__marker`} />\n                            <span className={'district__name'}>{districtName}</span>\n                            <span className={'district__count'}>{count}</span>\n                        </div>\n                    );\n                })}\n            </FilterGroup>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { BarLoader } from 'react-spinners';\nimport { ReactSVG } from 'react-svg';\n\nimport arrows from '../../images/arrows.svg';\nimport controls from '../../images/controls.svg';\nimport './styles.scss';\nimport TimeframePicker from '../TimeframePicker';\nimport IncidentGroupFilter from '../IncidentGroupFilter';\nimport { getTotalIncidentCount, getVisibleIncidentCount } from '../../state/incidents';\nimport DistrictFilter from '../DistrictFilter';\nimport { LOCALE } from '../../constants/locale';\n\nexport default function Menu({\n    timeframe,\n    dates,\n    onTimeframeChange,\n    isLoadingIncidents,\n    incidentsState,\n    dispatchIncidentsAction\n}) {\n    const { startDate, endDate } = dates,\n        total = getTotalIncidentCount(incidentsState),\n        visible = getVisibleIncidentCount(incidentsState),\n        hasIncidents = total > 0,\n        [collapsed, setCollapsed] = useState(false);\n\n    return (\n        <div className={`menu-root ${collapsed ? 'collapsed' : ''}`}>\n            <div className={'menu-title'}>\n                {collapsed && <h1>BPI</h1>}\n                {!collapsed && (\n                    <h1>\n                        Boston <br /> Police Incidents\n                    </h1>\n                )}\n            </div>\n\n            {collapsed && (\n                <div className={'menu-content menu-controls-icon'} onClick={() => setCollapsed(false)}>\n                    <ReactSVG src={controls} />\n                </div>\n            )}\n\n            {!collapsed && (\n                <div className={'menu-content'}>\n                    <div className={'menu-section menu-date-section'}>\n                        <h2 className={'menu-section-title'}>Date Range</h2>\n                        <span className={'menu-dates'}>{`${startDate.format(\n                            startDate.year === endDate.year ? 'MMM D' : 'MMM D, YYYY'\n                        )} – ${endDate.format('MMM D, YYYY')}`}</span>\n                        <TimeframePicker timeframe={timeframe} dates={dates} onTimeframeChange={onTimeframeChange} />\n                    </div>\n\n                    {isLoadingIncidents && (\n                        <div className={'menu-loader'}>\n                            <BarLoader size={50} color={'#98ff98'} loading={true} />\n                        </div>\n                    )}\n\n                    {!isLoadingIncidents && !hasIncidents && (\n                        <div className={'menu-summary'}>\n                            Oops. We couldn't find any incidents with location data for this date range\n                        </div>\n                    )}\n\n                    {!isLoadingIncidents && hasIncidents && (\n                        <>\n                            <div className={'menu-section'}>\n                                <div className={'menu-summary'}>{`Showing ${\n                                    visible === total\n                                        ? `${total.toLocaleString(LOCALE)}`\n                                        : `${visible.toLocaleString(LOCALE)} of ${total.toLocaleString(LOCALE)}`\n                                } incidents`}</div>\n                            </div>\n\n                            <div className={'menu-section menu-picker'}>\n                                <IncidentGroupFilter\n                                    incidentsState={incidentsState}\n                                    dispatchIncidentsAction={dispatchIncidentsAction}\n                                />\n                            </div>\n\n                            <div className={'menu-section menu-picker'}>\n                                <DistrictFilter\n                                    incidentsState={incidentsState}\n                                    dispatchIncidentsAction={dispatchIncidentsAction}\n                                />\n                            </div>\n                        </>\n                    )}\n                </div>\n            )}\n\n            <div className={'menu-footer'}>\n                <div className='menu-collapser' onClick={() => setCollapsed(!collapsed)}>\n                    <div className='menu-arrows'>\n                        <ReactSVG src={arrows} />\n                    </div>\n                </div>\n\n                {collapsed && (\n                    <div className={'menu-attribution'}>\n                        <a href='https://www.codeforboston.org/' target='_blank' rel='noopener noreferrer'>\n                            C4B\n                        </a>\n                    </div>\n                )}\n\n                {!collapsed && (\n                    <div className={'menu-attribution'}>\n                        Made with ♥ by{' '}\n                        <a href='https://www.codeforboston.org/' target='_blank' rel='noopener noreferrer'>\n                            Code for Boston\n                        </a>\n                        <br />\n                        Data from{' '}\n                        <a\n                            href='https://data.boston.gov/dataset/crime-incident-reports-august-2015-to-date-source-new-system/resource/12cb3883-56f5-47de-afa5-3b1cf61b257b'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            boston.data.gov\n                        </a>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n","import moment from 'moment';\n\nexport function getTimeframeDates({ timeframe, endDate = moment() }) {\n    const { value, unit } = timeframe;\n    return { startDate: moment(endDate).subtract(value, unit), endDate };\n}\n","const BASE_SQL_QUERY_URL = `https://data.boston.gov/api/3/action/datastore_search_sql?sql=`,\n    DATE_FORMAT = 'YYYY-MM-DD hh:mm';\n\n/**\n * Counter used to generate unique ids for incoming incidents. Incremented after each incident is processed.\n * The incoming incidents do have a unique id as well, but this ensures that each id is in fact unique and\n * always available. That's likely true on the backend side as well but this way we didn't have to worry about it\n *\n * @type {number}\n */\nlet counter = 0;\n\n/**\n * Returns an array of incidents\n *\n * @param startDate - moment date\n * @param endDate - moment date\n * @returns {Incident[]}\n */\nexport async function getIncidents({ startDate, endDate }) {\n    const sqlQuery = `SELECT * \n        FROM \"12cb3883-56f5-47de-afa5-3b1cf61b257b\" \n        WHERE \"OCCURRED_ON_DATE\" BETWEEN '${startDate.format(DATE_FORMAT)}' AND '${endDate.format(DATE_FORMAT)}'\n    `;\n\n    // Fetch records:\n    const res = await fetch(BASE_SQL_QUERY_URL + sqlQuery),\n        json = await res.json();\n\n    return json.result.records.map(r => {\n        counter += 1;\n        return { ...r, _clientSideId: `_i${counter}` };\n    });\n}\n","import React from 'react';\nimport moment from 'moment';\n\nimport './styles.scss';\nimport { getDistrictName } from '../../utils/districts';\nimport { codeGroupScale, getIncidentGroupName } from '../../utils/codeGroups';\n\n/**\n *\n * @param incident {Incident}\n */\nexport default function IncidentCard({ incident }) {\n    const incidentGroupName = getIncidentGroupName(incident),\n        groupColor = codeGroupScale(incidentGroupName);\n\n    return (\n        <div className={'incident-card'} style={{ borderColor: groupColor }}>\n            <div className={'incident-time'}>{moment(incident.OCCURRED_ON_DATE).format('llll')}</div>\n            <div className='incident-description'>\n                <span className={'incident-group-name'}>{incidentGroupName}</span>\n                <span className={'incident-description-full'}>{incident.OFFENSE_DESCRIPTION}</span>\n            </div>\n            <div className={'incident-location'}>\n                <span className={'incident-district'}>{getDistrictName({ districtCode: incident.DISTRICT })}</span>\n                <span>, </span>\n                <span className={'incident-street'}>{incident.STREET}</span>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport './styles.scss';\nimport IncidentCard from '../IncidentCard';\n\n/**\n * Amount of incidents to display in feed for each increment/page as user scrolls down\n *\n * @type {number}\n */\nconst INCREMENT = 30;\n\n/**\n *\n * @param incidents {Incident[]}\n */\nexport default function IncidentFeed({ incidents, onIncidentClick }) {\n    const [feedIncidents, setFeedIncidents] = useState([]),\n        [index, setIndex] = useState(INCREMENT);\n\n    useEffect(() => {\n        setFeedIncidents(incidents.slice(0, index));\n    }, [incidents, index]);\n\n    if (!incidents || incidents.length === 0) {\n        return null;\n    }\n\n    const incidentComponents = feedIncidents.map(incident => {\n        return (\n            <IncidentCard\n                key={`incident-card-${incident._clientSideId}`}\n                incident={incident}\n                onIncidentClick={onIncidentClick}\n            />\n        );\n    });\n\n    return (\n        <div className={'incident-feed'}>\n            <h2 className={'incident-feed-title'}>Most Recent Incidents</h2>\n            <div className={'incident-feed-content'}>\n                <InfiniteScroll\n                    pageStart={1}\n                    loadMore={page => {\n                        setIndex(page * INCREMENT);\n                    }}\n                    hasMore={index <= incidents.length}\n                    loader={\n                        <div className={'incident-feed-loading'} key={`loading-${index}`}>\n                            Loading more...\n                        </div>\n                    }\n                    useWindow={false}\n                >\n                    {incidentComponents}\n                </InfiniteScroll>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nimport Map from './components/Map';\nimport Menu from './components/Menu';\nimport './styles/global.scss';\nimport { SEVEN_DAYS } from './constants/timeframes';\nimport { getTimeframeDates } from './utils/timeframes';\nimport { getIncidents } from './utils/client';\nimport useIncidentsReducer, { getVisibleIncidents, loadIncidents } from './state/incidents';\nimport { loadIncidentsAndResetFilters } from './state/incidents/actions';\nimport IncidentFeed from './components/IncidentFeed';\n\nconst END_DATE = moment();\n\nexport default function App() {\n    const [loading, setLoading] = useState(true),\n        [timeframe, setTimeframe] = useState(SEVEN_DAYS),\n        [dates, setDates] = useState(\n            getTimeframeDates({\n                timeframe,\n                endDate: END_DATE\n            })\n        ),\n        [incidentsState, dispatchIncidentsAction] = useIncidentsReducer();\n\n    useEffect(() => {\n        const { startDate, endDate } = getTimeframeDates({ timeframe, endDate: END_DATE });\n\n        // Update dates in state:\n        setDates({ startDate, endDate });\n\n        // Refresh incidents in map:\n        getIncidents({ startDate, endDate }).then(incidents => {\n            dispatchIncidentsAction(loadIncidentsAndResetFilters(incidents));\n            setLoading(false);\n        });\n\n        // Reset incidents periodically so new ones show up:\n        const intervalId = setInterval(() => {\n            getIncidents({ startDate, endDate }).then(incidents => {\n                dispatchIncidentsAction(loadIncidents(incidents));\n                setLoading(false);\n            });\n        }, 60 * 1000);\n        return () => clearInterval(intervalId);\n    }, [timeframe, dispatchIncidentsAction]);\n\n    return (\n        <div id='app-root'>\n            <Menu\n                timeframe={timeframe}\n                dates={dates}\n                onTimeframeChange={t => {\n                    setLoading(true);\n                    setTimeframe(t);\n                }}\n                isLoadingIncidents={loading}\n                incidentsState={incidentsState}\n                dispatchIncidentsAction={dispatchIncidentsAction}\n            />\n            <Map incidents={getVisibleIncidents(incidentsState)} />\n            <IncidentFeed incidents={getVisibleIncidents(incidentsState)} />\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/arrows.6820edc8.svg\";","module.exports = __webpack_public_path__ + \"static/media/controls.8fd6a55e.svg\";"],"sourceRoot":""}